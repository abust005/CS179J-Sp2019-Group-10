
MADLADS_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d46  00000dda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  00800104  00800104  00000dde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000101c  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000947  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc0  00000000  00000000  000028b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  00003574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  0000399c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008eb  00000000  00000000  0000409d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	71 c1       	rjmp	.+738    	; 0x2ec <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fa c0       	rjmp	.+500    	; 0x22a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 33       	cpi	r26, 0x3E	; 62
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	50 d5       	rcall	.+2720   	; 0xb64 <main>
  c4:	3e c6       	rjmp	.+3196   	; 0xd42 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
	return(0);
}

void Radio_RxRead(unsigned char data[], unsigned char bytes) {
	readPayloadRx(data, bytes);
}
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <i.1615>
  d8:	9d c0       	rjmp	.+314    	; 0x214 <TimerISR+0x14c>
  da:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	4b e0       	ldi	r20, 0x0B	; 11
  e4:	42 9f       	mul	r20, r18
  e6:	c0 01       	movw	r24, r0
  e8:	43 9f       	mul	r20, r19
  ea:	90 0d       	add	r25, r0
  ec:	11 24       	eor	r1, r1
  ee:	88 5e       	subi	r24, 0xE8	; 232
  f0:	9e 4f       	sbci	r25, 0xFE	; 254
  f2:	fc 01       	movw	r30, r24
  f4:	20 81       	ld	r18, Z
  f6:	31 81       	ldd	r19, Z+1	; 0x01
  f8:	42 81       	ldd	r20, Z+2	; 0x02
  fa:	53 81       	ldd	r21, Z+3	; 0x03
  fc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 100:	68 2f       	mov	r22, r24
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	eb e0       	ldi	r30, 0x0B	; 11
 106:	e6 9f       	mul	r30, r22
 108:	c0 01       	movw	r24, r0
 10a:	e7 9f       	mul	r30, r23
 10c:	90 0d       	add	r25, r0
 10e:	11 24       	eor	r1, r1
 110:	8c 5e       	subi	r24, 0xEC	; 236
 112:	9e 4f       	sbci	r25, 0xFE	; 254
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	a2 81       	ldd	r26, Z+2	; 0x02
 11c:	b3 81       	ldd	r27, Z+3	; 0x03
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	4a 07       	cpc	r20, r26
 124:	5b 07       	cpc	r21, r27
 126:	08 f4       	brcc	.+2      	; 0x12a <TimerISR+0x62>
 128:	42 c0       	rjmp	.+132    	; 0x1ae <TimerISR+0xe6>
 12a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 12e:	08 2f       	mov	r16, r24
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	4b e0       	ldi	r20, 0x0B	; 11
 13c:	42 9f       	mul	r20, r18
 13e:	c0 01       	movw	r24, r0
 140:	43 9f       	mul	r20, r19
 142:	90 0d       	add	r25, r0
 144:	11 24       	eor	r1, r1
 146:	84 5e       	subi	r24, 0xE4	; 228
 148:	9e 4f       	sbci	r25, 0xFE	; 254
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	31 81       	ldd	r19, Z+1	; 0x01
 150:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 154:	48 2f       	mov	r20, r24
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	6b e0       	ldi	r22, 0x0B	; 11
 15a:	64 9f       	mul	r22, r20
 15c:	c0 01       	movw	r24, r0
 15e:	65 9f       	mul	r22, r21
 160:	90 0d       	add	r25, r0
 162:	11 24       	eor	r1, r1
 164:	8d 5e       	subi	r24, 0xED	; 237
 166:	9e 4f       	sbci	r25, 0xFE	; 254
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	08 2e       	mov	r0, r24
 16e:	00 0c       	add	r0, r0
 170:	99 0b       	sbc	r25, r25
 172:	f9 01       	movw	r30, r18
 174:	09 95       	icall
 176:	38 2f       	mov	r19, r24
 178:	2b e0       	ldi	r18, 0x0B	; 11
 17a:	20 9f       	mul	r18, r16
 17c:	c0 01       	movw	r24, r0
 17e:	21 9f       	mul	r18, r17
 180:	90 0d       	add	r25, r0
 182:	11 24       	eor	r1, r1
 184:	8d 5e       	subi	r24, 0xED	; 237
 186:	9e 4f       	sbci	r25, 0xFE	; 254
 188:	fc 01       	movw	r30, r24
 18a:	30 83       	st	Z, r19
 18c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4b e0       	ldi	r20, 0x0B	; 11
 196:	42 9f       	mul	r20, r18
 198:	c0 01       	movw	r24, r0
 19a:	43 9f       	mul	r20, r19
 19c:	90 0d       	add	r25, r0
 19e:	11 24       	eor	r1, r1
 1a0:	88 5e       	subi	r24, 0xE8	; 232
 1a2:	9e 4f       	sbci	r25, 0xFE	; 254
 1a4:	fc 01       	movw	r30, r24
 1a6:	10 82       	st	Z, r1
 1a8:	11 82       	std	Z+1, r1	; 0x01
 1aa:	12 82       	std	Z+2, r1	; 0x02
 1ac:	13 82       	std	Z+3, r1	; 0x03
 1ae:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 1b2:	68 2f       	mov	r22, r24
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	4b e0       	ldi	r20, 0x0B	; 11
 1c0:	42 9f       	mul	r20, r18
 1c2:	c0 01       	movw	r24, r0
 1c4:	43 9f       	mul	r20, r19
 1c6:	90 0d       	add	r25, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	88 5e       	subi	r24, 0xE8	; 232
 1cc:	9e 4f       	sbci	r25, 0xFE	; 254
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 81       	ld	r18, Z
 1d2:	31 81       	ldd	r19, Z+1	; 0x01
 1d4:	42 81       	ldd	r20, Z+2	; 0x02
 1d6:	53 81       	ldd	r21, Z+3	; 0x03
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	a4 1f       	adc	r26, r20
 1ee:	b5 1f       	adc	r27, r21
 1f0:	4b e0       	ldi	r20, 0x0B	; 11
 1f2:	46 9f       	mul	r20, r22
 1f4:	90 01       	movw	r18, r0
 1f6:	47 9f       	mul	r20, r23
 1f8:	30 0d       	add	r19, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	28 5e       	subi	r18, 0xE8	; 232
 1fe:	3e 4f       	sbci	r19, 0xFE	; 254
 200:	f9 01       	movw	r30, r18
 202:	80 83       	st	Z, r24
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	a2 83       	std	Z+2, r26	; 0x02
 208:	b3 83       	std	Z+3, r27	; 0x03
 20a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i.1615>
 214:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	08 f4       	brcc	.+2      	; 0x21e <TimerISR+0x156>
 21c:	5e cf       	rjmp	.-324    	; 0xda <TimerISR+0x12>
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <__vector_13>:
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 23a:	0f 92       	push	r0
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 260:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 264:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 268:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	a1 09       	sbc	r26, r1
 270:	b1 09       	sbc	r27, r1
 272:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 276:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 27a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 27e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 282:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 286:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 28a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 28e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 292:	89 2b       	or	r24, r25
 294:	8a 2b       	or	r24, r26
 296:	8b 2b       	or	r24, r27
 298:	89 f4       	brne	.+34     	; 0x2bc <__vector_13+0x92>
 29a:	16 df       	rcall	.-468    	; 0xc8 <TimerISR>
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2a4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2a8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2b0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2b4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 2b8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 2bc:	00 00       	nop
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2e0:	0f 90       	pop	r0
 2e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_2>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2fc:	0f 92       	push	r0
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sonar_flag>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	a9 f4       	brne	.+42     	; 0x344 <__vector_2+0x58>
 31a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sonar_flag>
 31e:	81 e9       	ldi	r24, 0x91	; 145
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	10 82       	st	Z, r1
 326:	84 e9       	ldi	r24, 0x94	; 148
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	91 81       	ldd	r25, Z+1	; 0x01
 330:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <sonar+0x1>
 334:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sonar>
 338:	84 e9       	ldi	r24, 0x94	; 148
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	fc 01       	movw	r30, r24
 33e:	11 82       	std	Z+1, r1	; 0x01
 340:	10 82       	st	Z, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <__vector_2+0x70>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sonar_flag>
 34a:	81 e9       	ldi	r24, 0x91	; 145
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	21 e9       	ldi	r18, 0x91	; 145
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	22 60       	ori	r18, 0x02	; 2
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
 35c:	00 00       	nop
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 374:	0f 90       	pop	r0
 376:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <TimerSet>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <TimerSet+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <TimerSet+0x8>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	69 83       	std	Y+1, r22	; 0x01
 38e:	7a 83       	std	Y+2, r23	; 0x02
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	9c 83       	std	Y+4, r25	; 0x04
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	ab 81       	ldd	r26, Y+3	; 0x03
 39a:	bc 81       	ldd	r27, Y+4	; 0x04
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 3c4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 3c8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 3cc:	00 00       	nop
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <TimerOn>:
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	81 e8       	ldi	r24, 0x81	; 129
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2b e0       	ldi	r18, 0x0B	; 11
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	88 e8       	ldi	r24, 0x88	; 136
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2d e7       	ldi	r18, 0x7D	; 125
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	fc 01       	movw	r30, r24
 3f8:	31 83       	std	Z+1, r19	; 0x01
 3fa:	20 83       	st	Z, r18
 3fc:	8f e6       	ldi	r24, 0x6F	; 111
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	22 e0       	ldi	r18, 0x02	; 2
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
 406:	84 e8       	ldi	r24, 0x84	; 132
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	fc 01       	movw	r30, r24
 40c:	11 82       	std	Z+1, r1	; 0x01
 40e:	10 82       	st	Z, r1
 410:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 414:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 418:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 41c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 420:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 424:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 428:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 42c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 430:	8f e5       	ldi	r24, 0x5F	; 95
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	2f e5       	ldi	r18, 0x5F	; 95
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	20 68       	ori	r18, 0x80	; 128
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
 442:	00 00       	nop
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <delay_ms>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <delay_ms+0x6>
 450:	00 d0       	rcall	.+0      	; 0x452 <delay_ms+0x8>
 452:	00 d0       	rcall	.+0      	; 0x454 <delay_ms+0xa>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	9e 83       	std	Y+6, r25	; 0x06
 45a:	8d 83       	std	Y+5, r24	; 0x05
 45c:	1a 82       	std	Y+2, r1	; 0x02
 45e:	19 82       	std	Y+1, r1	; 0x01
 460:	13 c0       	rjmp	.+38     	; 0x488 <delay_ms+0x3e>
 462:	1c 82       	std	Y+4, r1	; 0x04
 464:	1b 82       	std	Y+3, r1	; 0x03
 466:	06 c0       	rjmp	.+12     	; 0x474 <delay_ms+0x2a>
 468:	00 00       	nop
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	9c 83       	std	Y+4, r25	; 0x04
 472:	8b 83       	std	Y+3, r24	; 0x03
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	9c 81       	ldd	r25, Y+4	; 0x04
 478:	87 30       	cpi	r24, 0x07	; 7
 47a:	93 40       	sbci	r25, 0x03	; 3
 47c:	ac f3       	brlt	.-22     	; 0x468 <delay_ms+0x1e>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	89 83       	std	Y+1, r24	; 0x01
 488:	29 81       	ldd	r18, Y+1	; 0x01
 48a:	3a 81       	ldd	r19, Y+2	; 0x02
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	9e 81       	ldd	r25, Y+6	; 0x06
 490:	28 17       	cp	r18, r24
 492:	39 07       	cpc	r19, r25
 494:	34 f3       	brlt	.-52     	; 0x462 <delay_ms+0x18>
 496:	00 00       	nop
 498:	26 96       	adiw	r28, 0x06	; 6
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <SPI_MasterInit>:
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	84 e2       	ldi	r24, 0x24	; 36
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	24 e2       	ldi	r18, 0x24	; 36
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	f9 01       	movw	r30, r18
 4bc:	20 81       	ld	r18, Z
 4be:	20 6b       	ori	r18, 0xB0	; 176
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
 4c4:	8c e4       	ldi	r24, 0x4C	; 76
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	2c e4       	ldi	r18, 0x4C	; 76
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	f9 01       	movw	r30, r18
 4ce:	20 81       	ld	r18, Z
 4d0:	21 65       	ori	r18, 0x51	; 81
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
 4d6:	8f e5       	ldi	r24, 0x5F	; 95
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	2f e5       	ldi	r18, 0x5F	; 95
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	f9 01       	movw	r30, r18
 4e0:	20 81       	ld	r18, Z
 4e2:	20 68       	ori	r18, 0x80	; 128
 4e4:	fc 01       	movw	r30, r24
 4e6:	20 83       	st	Z, r18
 4e8:	00 00       	nop
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <writeRegister>:
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <writeRegister+0x6>
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <writeRegister+0x8>
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <writeRegister+0xa>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	8b 83       	std	Y+3, r24	; 0x03
 500:	7d 83       	std	Y+5, r23	; 0x05
 502:	6c 83       	std	Y+4, r22	; 0x04
 504:	4e 83       	std	Y+6, r20	; 0x06
 506:	85 e2       	ldi	r24, 0x25	; 37
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	25 e2       	ldi	r18, 0x25	; 37
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	f9 01       	movw	r30, r18
 510:	20 81       	ld	r18, Z
 512:	2e 7f       	andi	r18, 0xFE	; 254
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18
 518:	8e e4       	ldi	r24, 0x4E	; 78
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	2b 81       	ldd	r18, Y+3	; 0x03
 51e:	2f 71       	andi	r18, 0x1F	; 31
 520:	20 62       	ori	r18, 0x20	; 32
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
 526:	00 00       	nop
 528:	8d e4       	ldi	r24, 0x4D	; 77
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	fc 01       	movw	r30, r24
 52e:	80 81       	ld	r24, Z
 530:	88 23       	and	r24, r24
 532:	d4 f7       	brge	.-12     	; 0x528 <writeRegister+0x38>
 534:	8e e4       	ldi	r24, 0x4E	; 78
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	fc 01       	movw	r30, r24
 53a:	80 81       	ld	r24, Z
 53c:	8a 83       	std	Y+2, r24	; 0x02
 53e:	19 82       	std	Y+1, r1	; 0x01
 540:	17 c0       	rjmp	.+46     	; 0x570 <writeRegister+0x80>
 542:	8e e4       	ldi	r24, 0x4E	; 78
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	29 81       	ldd	r18, Y+1	; 0x01
 548:	22 2f       	mov	r18, r18
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	4c 81       	ldd	r20, Y+4	; 0x04
 54e:	5d 81       	ldd	r21, Y+5	; 0x05
 550:	24 0f       	add	r18, r20
 552:	35 1f       	adc	r19, r21
 554:	f9 01       	movw	r30, r18
 556:	20 81       	ld	r18, Z
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
 55c:	00 00       	nop
 55e:	8d e4       	ldi	r24, 0x4D	; 77
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	fc 01       	movw	r30, r24
 564:	80 81       	ld	r24, Z
 566:	88 23       	and	r24, r24
 568:	d4 f7       	brge	.-12     	; 0x55e <writeRegister+0x6e>
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	8f 5f       	subi	r24, 0xFF	; 255
 56e:	89 83       	std	Y+1, r24	; 0x01
 570:	99 81       	ldd	r25, Y+1	; 0x01
 572:	8e 81       	ldd	r24, Y+6	; 0x06
 574:	98 17       	cp	r25, r24
 576:	28 f3       	brcs	.-54     	; 0x542 <writeRegister+0x52>
 578:	85 e2       	ldi	r24, 0x25	; 37
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	25 e2       	ldi	r18, 0x25	; 37
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	f9 01       	movw	r30, r18
 582:	20 81       	ld	r18, Z
 584:	21 60       	ori	r18, 0x01	; 1
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	26 96       	adiw	r28, 0x06	; 6
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <writePayloadTxNoack>:
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <writePayloadTxNoack+0x6>
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <writePayloadTxNoack+0x8>
 5a6:	1f 92       	push	r1
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	9c 83       	std	Y+4, r25	; 0x04
 5ae:	8b 83       	std	Y+3, r24	; 0x03
 5b0:	6d 83       	std	Y+5, r22	; 0x05
 5b2:	85 e2       	ldi	r24, 0x25	; 37
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	25 e2       	ldi	r18, 0x25	; 37
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	f9 01       	movw	r30, r18
 5bc:	20 81       	ld	r18, Z
 5be:	2e 7f       	andi	r18, 0xFE	; 254
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
 5c4:	8e e4       	ldi	r24, 0x4E	; 78
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	20 eb       	ldi	r18, 0xB0	; 176
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 83       	st	Z, r18
 5ce:	00 00       	nop
 5d0:	8d e4       	ldi	r24, 0x4D	; 77
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	fc 01       	movw	r30, r24
 5d6:	80 81       	ld	r24, Z
 5d8:	88 23       	and	r24, r24
 5da:	d4 f7       	brge	.-12     	; 0x5d0 <writePayloadTxNoack+0x32>
 5dc:	8e e4       	ldi	r24, 0x4E	; 78
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	fc 01       	movw	r30, r24
 5e2:	80 81       	ld	r24, Z
 5e4:	8a 83       	std	Y+2, r24	; 0x02
 5e6:	19 82       	std	Y+1, r1	; 0x01
 5e8:	17 c0       	rjmp	.+46     	; 0x618 <writePayloadTxNoack+0x7a>
 5ea:	8e e4       	ldi	r24, 0x4E	; 78
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	29 81       	ldd	r18, Y+1	; 0x01
 5f0:	22 2f       	mov	r18, r18
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	4b 81       	ldd	r20, Y+3	; 0x03
 5f6:	5c 81       	ldd	r21, Y+4	; 0x04
 5f8:	24 0f       	add	r18, r20
 5fa:	35 1f       	adc	r19, r21
 5fc:	f9 01       	movw	r30, r18
 5fe:	20 81       	ld	r18, Z
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
 604:	00 00       	nop
 606:	8d e4       	ldi	r24, 0x4D	; 77
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	fc 01       	movw	r30, r24
 60c:	80 81       	ld	r24, Z
 60e:	88 23       	and	r24, r24
 610:	d4 f7       	brge	.-12     	; 0x606 <writePayloadTxNoack+0x68>
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	8f 5f       	subi	r24, 0xFF	; 255
 616:	89 83       	std	Y+1, r24	; 0x01
 618:	99 81       	ldd	r25, Y+1	; 0x01
 61a:	8d 81       	ldd	r24, Y+5	; 0x05
 61c:	98 17       	cp	r25, r24
 61e:	28 f3       	brcs	.-54     	; 0x5ea <writePayloadTxNoack+0x4c>
 620:	85 e2       	ldi	r24, 0x25	; 37
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	25 e2       	ldi	r18, 0x25	; 37
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	f9 01       	movw	r30, r18
 62a:	20 81       	ld	r18, Z
 62c:	21 60       	ori	r18, 0x01	; 1
 62e:	fc 01       	movw	r30, r24
 630:	20 83       	st	Z, r18
 632:	8a 81       	ldd	r24, Y+2	; 0x02
 634:	0f 90       	pop	r0
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <flushTx>:
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	1f 92       	push	r1
 64a:	cd b7       	in	r28, 0x3d	; 61
 64c:	de b7       	in	r29, 0x3e	; 62
 64e:	85 e2       	ldi	r24, 0x25	; 37
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	25 e2       	ldi	r18, 0x25	; 37
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	f9 01       	movw	r30, r18
 658:	20 81       	ld	r18, Z
 65a:	2e 7f       	andi	r18, 0xFE	; 254
 65c:	fc 01       	movw	r30, r24
 65e:	20 83       	st	Z, r18
 660:	8e e4       	ldi	r24, 0x4E	; 78
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	21 ee       	ldi	r18, 0xE1	; 225
 666:	fc 01       	movw	r30, r24
 668:	20 83       	st	Z, r18
 66a:	00 00       	nop
 66c:	8d e4       	ldi	r24, 0x4D	; 77
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	fc 01       	movw	r30, r24
 672:	80 81       	ld	r24, Z
 674:	88 23       	and	r24, r24
 676:	d4 f7       	brge	.-12     	; 0x66c <flushTx+0x28>
 678:	8e e4       	ldi	r24, 0x4E	; 78
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	fc 01       	movw	r30, r24
 67e:	80 81       	ld	r24, Z
 680:	89 83       	std	Y+1, r24	; 0x01
 682:	85 e2       	ldi	r24, 0x25	; 37
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	25 e2       	ldi	r18, 0x25	; 37
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	f9 01       	movw	r30, r18
 68c:	20 81       	ld	r18, Z
 68e:	21 60       	ori	r18, 0x01	; 1
 690:	fc 01       	movw	r30, r24
 692:	20 83       	st	Z, r18
 694:	89 81       	ldd	r24, Y+1	; 0x01
 696:	0f 90       	pop	r0
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <Radio_TxInit>:
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <Radio_TxInit+0x6>
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <Radio_TxInit+0x8>
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	ff de       	rcall	.-514    	; 0x4aa <SPI_MasterInit>
 6ac:	84 e2       	ldi	r24, 0x24	; 36
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	24 e2       	ldi	r18, 0x24	; 36
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	f9 01       	movw	r30, r18
 6b6:	20 81       	ld	r18, Z
 6b8:	23 60       	ori	r18, 0x03	; 3
 6ba:	fc 01       	movw	r30, r24
 6bc:	20 83       	st	Z, r18
 6be:	85 e2       	ldi	r24, 0x25	; 37
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	25 e2       	ldi	r18, 0x25	; 37
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	f9 01       	movw	r30, r18
 6c8:	20 81       	ld	r18, Z
 6ca:	25 60       	ori	r18, 0x05	; 5
 6cc:	fc 01       	movw	r30, r24
 6ce:	20 83       	st	Z, r18
 6d0:	85 e0       	ldi	r24, 0x05	; 5
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	ba de       	rcall	.-652    	; 0x44a <delay_ms>
 6d6:	82 e7       	ldi	r24, 0x72	; 114
 6d8:	89 83       	std	Y+1, r24	; 0x01
 6da:	88 e1       	ldi	r24, 0x18	; 24
 6dc:	8a 83       	std	Y+2, r24	; 0x02
 6de:	84 e0       	ldi	r24, 0x04	; 4
 6e0:	8b 83       	std	Y+3, r24	; 0x03
 6e2:	86 e9       	ldi	r24, 0x96	; 150
 6e4:	8c 83       	std	Y+4, r24	; 0x04
 6e6:	41 e0       	ldi	r20, 0x01	; 1
 6e8:	ce 01       	movw	r24, r28
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	bc 01       	movw	r22, r24
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	ff de       	rcall	.-514    	; 0x4f0 <writeRegister>
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	89 83       	std	Y+1, r24	; 0x01
 6f6:	41 e0       	ldi	r20, 0x01	; 1
 6f8:	ce 01       	movw	r24, r28
 6fa:	01 96       	adiw	r24, 0x01	; 1
 6fc:	bc 01       	movw	r22, r24
 6fe:	83 e0       	ldi	r24, 0x03	; 3
 700:	f7 de       	rcall	.-530    	; 0x4f0 <writeRegister>
 702:	ce 01       	movw	r24, r28
 704:	02 96       	adiw	r24, 0x02	; 2
 706:	43 e0       	ldi	r20, 0x03	; 3
 708:	bc 01       	movw	r22, r24
 70a:	80 e1       	ldi	r24, 0x10	; 16
 70c:	f1 de       	rcall	.-542    	; 0x4f0 <writeRegister>
 70e:	8c e4       	ldi	r24, 0x4C	; 76
 710:	89 83       	std	Y+1, r24	; 0x01
 712:	41 e0       	ldi	r20, 0x01	; 1
 714:	ce 01       	movw	r24, r28
 716:	01 96       	adiw	r24, 0x01	; 1
 718:	bc 01       	movw	r22, r24
 71a:	85 e0       	ldi	r24, 0x05	; 5
 71c:	e9 de       	rcall	.-558    	; 0x4f0 <writeRegister>
 71e:	19 82       	std	Y+1, r1	; 0x01
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	ce 01       	movw	r24, r28
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	bc 01       	movw	r22, r24
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	e2 de       	rcall	.-572    	; 0x4f0 <writeRegister>
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	ce 01       	movw	r24, r28
 730:	01 96       	adiw	r24, 0x01	; 1
 732:	bc 01       	movw	r22, r24
 734:	84 e0       	ldi	r24, 0x04	; 4
 736:	dc de       	rcall	.-584    	; 0x4f0 <writeRegister>
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	89 83       	std	Y+1, r24	; 0x01
 73c:	41 e0       	ldi	r20, 0x01	; 1
 73e:	ce 01       	movw	r24, r28
 740:	01 96       	adiw	r24, 0x01	; 1
 742:	bc 01       	movw	r22, r24
 744:	8d e1       	ldi	r24, 0x1D	; 29
 746:	d4 de       	rcall	.-600    	; 0x4f0 <writeRegister>
 748:	7d df       	rcall	.-262    	; 0x644 <flushTx>
 74a:	85 e2       	ldi	r24, 0x25	; 37
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	25 e2       	ldi	r18, 0x25	; 37
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	f9 01       	movw	r30, r18
 754:	20 81       	ld	r18, Z
 756:	22 60       	ori	r18, 0x02	; 2
 758:	fc 01       	movw	r30, r24
 75a:	20 83       	st	Z, r18
 75c:	00 00       	nop
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

0000076c <Radio_TxTransmit>:
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	00 d0       	rcall	.+0      	; 0x772 <Radio_TxTransmit+0x6>
 772:	1f 92       	push	r1
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
 778:	9a 83       	std	Y+2, r25	; 0x02
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	6b 83       	std	Y+3, r22	; 0x03
 77e:	89 81       	ldd	r24, Y+1	; 0x01
 780:	9a 81       	ldd	r25, Y+2	; 0x02
 782:	6b 81       	ldd	r22, Y+3	; 0x03
 784:	0c df       	rcall	.-488    	; 0x59e <writePayloadTxNoack>
 786:	00 00       	nop
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <Set_A2D_Pin>:
// Pins on PORTA are used as input for A2D conversion
// The Default Channel is 0 (PA0)
// The value of pinNum determines the pin on PORTA used for A2D conversion
// Valid values range between 0 and 7, where the value represents the desired pin for A2D conversion
void Set_A2D_Pin(unsigned char pinNum)
{
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	1f 92       	push	r1
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 7a0:	8c e7       	ldi	r24, 0x7C	; 124
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	29 81       	ldd	r18, Y+1	; 0x01
 7a6:	28 30       	cpi	r18, 0x08	; 8
 7a8:	28 f0       	brcs	.+10     	; 0x7b4 <Set_A2D_Pin+0x20>
 7aa:	2c e7       	ldi	r18, 0x7C	; 124
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	f9 01       	movw	r30, r18
 7b0:	20 81       	ld	r18, Z
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <Set_A2D_Pin+0x22>
 7b4:	29 81       	ldd	r18, Y+1	; 0x01
 7b6:	fc 01       	movw	r30, r24
 7b8:	20 83       	st	Z, r18
	// Allow channel to stabilize
	static unsigned char i = 0;
	for(i = 0; i < 15; ++i){asm("nop");}
 7ba:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i.1783>
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <Set_A2D_Pin+0x38>
 7c0:	00 00       	nop
 7c2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1783>
 7c6:	8f 5f       	subi	r24, 0xFF	; 255
 7c8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i.1783>
 7cc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1783>
 7d0:	8f 30       	cpi	r24, 0x0F	; 15
 7d2:	b0 f3       	brcs	.-20     	; 0x7c0 <Set_A2D_Pin+0x2c>
}
 7d4:	00 00       	nop
 7d6:	0f 90       	pop	r0
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <A2D_init>:

// ADEN: Enables analog-to-digital conversion
// ADSC: Starts analog-to-digital conversion
// ADATE: Enables auto-triggering, allowing for constant
//		  analog to digital conversions.
void A2D_init() { ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);}
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
 7e6:	8a e7       	ldi	r24, 0x7A	; 122
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	2a e7       	ldi	r18, 0x7A	; 122
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	f9 01       	movw	r30, r18
 7f0:	20 81       	ld	r18, Z
 7f2:	20 6e       	ori	r18, 0xE0	; 224
 7f4:	fc 01       	movw	r30, r24
 7f6:	20 83       	st	Z, r18
 7f8:	00 00       	nop
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <convert>:

void convert(){
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	cd b7       	in	r28, 0x3d	; 61
 806:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADSC); // start ADC conversion
 808:	8a e7       	ldi	r24, 0x7A	; 122
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	2a e7       	ldi	r18, 0x7A	; 122
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	f9 01       	movw	r30, r18
 812:	20 81       	ld	r18, Z
 814:	20 64       	ori	r18, 0x40	; 64
 816:	fc 01       	movw	r30, r24
 818:	20 83       	st	Z, r18
	while ( !(ADCSRA & (1<<ADIF))); // wait till ADC conversion
 81a:	00 00       	nop
 81c:	8a e7       	ldi	r24, 0x7A	; 122
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	fc 01       	movw	r30, r24
 822:	80 81       	ld	r24, Z
 824:	88 2f       	mov	r24, r24
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	80 71       	andi	r24, 0x10	; 16
 82a:	99 27       	eor	r25, r25
 82c:	89 2b       	or	r24, r25
 82e:	b1 f3       	breq	.-20     	; 0x81c <convert+0x1c>
}
 830:	00 00       	nop
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <TickFct_movement>:
11 - N/A
*/
enum movement_states {left_right, forward_reverse, up_down} movement_state;

int TickFct_movement(int movement_state)
{
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	00 d0       	rcall	.+0      	; 0x83e <TickFct_movement+0x6>
 83e:	cd b7       	in	r28, 0x3d	; 61
 840:	de b7       	in	r29, 0x3e	; 62
 842:	9a 83       	std	Y+2, r25	; 0x02
 844:	89 83       	std	Y+1, r24	; 0x01
	switch(movement_state)
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	9a 81       	ldd	r25, Y+2	; 0x02
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	91 05       	cpc	r25, r1
 84e:	09 f4       	brne	.+2      	; 0x852 <TickFct_movement+0x1a>
 850:	5b c0       	rjmp	.+182    	; 0x908 <TickFct_movement+0xd0>
 852:	82 30       	cpi	r24, 0x02	; 2
 854:	91 05       	cpc	r25, r1
 856:	09 f4       	brne	.+2      	; 0x85a <TickFct_movement+0x22>
 858:	96 c0       	rjmp	.+300    	; 0x986 <TickFct_movement+0x14e>
 85a:	89 2b       	or	r24, r25
 85c:	09 f0       	breq	.+2      	; 0x860 <TickFct_movement+0x28>
 85e:	c0 c0       	rjmp	.+384    	; 0x9e0 <TickFct_movement+0x1a8>
	{
		case left_right: // Left joystick controls left and right movements
			Set_A2D_Pin(0x02); // Sets analog signal to the left/right axis of the left joystick
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	98 df       	rcall	.-208    	; 0x794 <Set_A2D_Pin>
			convert();
 864:	cd df       	rcall	.-102    	; 0x800 <convert>
 866:	88 e7       	ldi	r24, 0x78	; 120
			joystick = ADC; // Read ADC value into joystick variable
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	fc 01       	movw	r30, r24
 86c:	80 81       	ld	r24, Z
 86e:	91 81       	ldd	r25, Z+1	; 0x01
 870:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <joystick+0x1>
 874:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <joystick>
 878:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <joystick>
			//droneSignal = (droneSignal & 0xE3); // L/R/F/R set to 000 for hover
			if(joystick > 700 && downFlag == 0) // Joystick is being tilted left
 87c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <joystick+0x1>
 880:	8d 3b       	cpi	r24, 0xBD	; 189
 882:	92 40       	sbci	r25, 0x02	; 2
 884:	b0 f0       	brcs	.+44     	; 0x8b2 <TickFct_movement+0x7a>
 886:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <downFlag>
 88a:	88 23       	and	r24, r24
 88c:	91 f4       	brne	.+36     	; 0x8b2 <TickFct_movement+0x7a>
 88e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <upFlag>
			{
				if(upFlag == 1)
 892:	81 30       	cpi	r24, 0x01	; 1
 894:	39 f4       	brne	.+14     	; 0x8a4 <TickFct_movement+0x6c>
 896:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
				{
					droneSignal = (droneSignal & 0xFB) | 0x10;
 89a:	8b 7e       	andi	r24, 0xEB	; 235
 89c:	80 61       	ori	r24, 0x10	; 16
 89e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 8a2:	2d c0       	rjmp	.+90     	; 0x8fe <TickFct_movement+0xc6>
			convert();
			joystick = ADC; // Read ADC value into joystick variable
			//droneSignal = (droneSignal & 0xE3); // L/R/F/R set to 000 for hover
			if(joystick > 700 && downFlag == 0) // Joystick is being tilted left
			{
				if(upFlag == 1)
 8a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
				{
					droneSignal = (droneSignal & 0xFB) | 0x10;
				}
				else
				{
					droneSignal = ((droneSignal & 0xE3) | 0x10); // L/R set to 100 for left 
 8a8:	83 7e       	andi	r24, 0xE3	; 227
 8aa:	80 61       	ori	r24, 0x10	; 16
 8ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 8b0:	26 c0       	rjmp	.+76     	; 0x8fe <TickFct_movement+0xc6>
			convert();
			joystick = ADC; // Read ADC value into joystick variable
			//droneSignal = (droneSignal & 0xE3); // L/R/F/R set to 000 for hover
			if(joystick > 700 && downFlag == 0) // Joystick is being tilted left
			{
				if(upFlag == 1)
 8b2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <joystick>
				else
				{
					droneSignal = ((droneSignal & 0xE3) | 0x10); // L/R set to 100 for left 
				} 
			}
			else if(joystick < 350 && downFlag == 0) // Joystick is being tilted right
 8b6:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <joystick+0x1>
 8ba:	8e 35       	cpi	r24, 0x5E	; 94
 8bc:	91 40       	sbci	r25, 0x01	; 1
 8be:	b0 f4       	brcc	.+44     	; 0x8ec <TickFct_movement+0xb4>
 8c0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <downFlag>
 8c4:	88 23       	and	r24, r24
 8c6:	91 f4       	brne	.+36     	; 0x8ec <TickFct_movement+0xb4>
 8c8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <upFlag>
			{
				if(upFlag == 1)
 8cc:	81 30       	cpi	r24, 0x01	; 1
 8ce:	39 f4       	brne	.+14     	; 0x8de <TickFct_movement+0xa6>
 8d0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
				{
					droneSignal = (droneSignal & 0xEF) | 0x04;
 8d4:	8b 7e       	andi	r24, 0xEB	; 235
 8d6:	84 60       	ori	r24, 0x04	; 4
 8d8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 8dc:	10 c0       	rjmp	.+32     	; 0x8fe <TickFct_movement+0xc6>
					droneSignal = ((droneSignal & 0xE3) | 0x10); // L/R set to 100 for left 
				} 
			}
			else if(joystick < 350 && downFlag == 0) // Joystick is being tilted right
			{
				if(upFlag == 1)
 8de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
				{
					droneSignal = (droneSignal & 0xEF) | 0x04;
				}
				else
				{
					droneSignal = ((droneSignal & 0xE3) | 0x04); // L/R set to 001 for right
 8e2:	83 7e       	andi	r24, 0xE3	; 227
 8e4:	84 60       	ori	r24, 0x04	; 4
 8e6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 8ea:	09 c0       	rjmp	.+18     	; 0x8fe <TickFct_movement+0xc6>
					droneSignal = ((droneSignal & 0xE3) | 0x10); // L/R set to 100 for left 
				} 
			}
			else if(joystick < 350 && downFlag == 0) // Joystick is being tilted right
			{
				if(upFlag == 1)
 8ec:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <downFlag>
					droneSignal = ((droneSignal & 0xE3) | 0x04); // L/R set to 001 for right
				}
			}
			else // Joysticks are not being tilted
			{
				if (downFlag == 0)
 8f0:	88 23       	and	r24, r24
 8f2:	29 f4       	brne	.+10     	; 0x8fe <TickFct_movement+0xc6>
 8f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
				{
					droneSignal = (droneSignal & 0xEB); // Bits anded with 010 to clear all but forward
 8f8:	8b 7e       	andi	r24, 0xEB	; 235
 8fa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 8fe:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
			movement_state = forward_reverse; // Return to the forward reverse state
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	9a 83       	std	Y+2, r25	; 0x02
 904:	89 83       	std	Y+1, r24	; 0x01
 906:	6f c0       	rjmp	.+222    	; 0x9e6 <TickFct_movement+0x1ae>
			break;
		case forward_reverse: // Left joystick controls forward and reverse movements
			Set_A2D_Pin(0x03); // Sets analog signal to the left/right axis of the right joystick
 908:	83 e0       	ldi	r24, 0x03	; 3
 90a:	44 df       	rcall	.-376    	; 0x794 <Set_A2D_Pin>
			convert();
 90c:	79 df       	rcall	.-270    	; 0x800 <convert>
 90e:	88 e7       	ldi	r24, 0x78	; 120
			joystick2 = ADC; // Read ADC value into joystick2 variable
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	fc 01       	movw	r30, r24
 914:	80 81       	ld	r24, Z
 916:	91 81       	ldd	r25, Z+1	; 0x01
 918:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <joystick2+0x1>
 91c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <joystick2>
 920:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <joystick2>
			if(joystick2 > 700) // Joystick is being tilted up
 924:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <joystick2+0x1>
 928:	8d 3b       	cpi	r24, 0xBD	; 189
 92a:	92 40       	sbci	r25, 0x02	; 2
 92c:	58 f0       	brcs	.+22     	; 0x944 <TickFct_movement+0x10c>
 92e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
			{
				droneSignal = (droneSignal | 0x08); // F/R set to 1 for forward
 932:	88 60       	ori	r24, 0x08	; 8
 934:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 938:	81 e0       	ldi	r24, 0x01	; 1
				upFlag = 1;
 93a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <upFlag>
 93e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <downFlag>
				downFlag = 0;
 942:	1c c0       	rjmp	.+56     	; 0x97c <TickFct_movement+0x144>
 944:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <joystick2>
			}
			else if(joystick2 < 350) // Joystick is being tilted down
 948:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <joystick2+0x1>
 94c:	8e 35       	cpi	r24, 0x5E	; 94
 94e:	91 40       	sbci	r25, 0x01	; 1
 950:	60 f4       	brcc	.+24     	; 0x96a <TickFct_movement+0x132>
 952:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
			{
				droneSignal = (droneSignal & 0xF7) | 0x14; // F/R set to 101 for reverse
 956:	83 7e       	andi	r24, 0xE3	; 227
 958:	84 61       	ori	r24, 0x14	; 20
 95a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 95e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <upFlag>
				upFlag = 0;
 962:	81 e0       	ldi	r24, 0x01	; 1
				downFlag = 1;
 964:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <downFlag>
 968:	09 c0       	rjmp	.+18     	; 0x97c <TickFct_movement+0x144>
 96a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
			}
			else // Joystick is not being tilted
			{
				droneSignal = droneSignal & 0xF7; // Bits anded with 101 to clear forward
 96e:	87 7f       	andi	r24, 0xF7	; 247
 970:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 974:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <upFlag>
				upFlag = 0;
 978:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <downFlag>
				downFlag = 0;
 97c:	82 e0       	ldi	r24, 0x02	; 2
			}
			movement_state = up_down; // Return to up down state
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	9a 83       	std	Y+2, r25	; 0x02
 982:	89 83       	std	Y+1, r24	; 0x01
			break;
 984:	30 c0       	rjmp	.+96     	; 0x9e6 <TickFct_movement+0x1ae>
		case up_down: // Right joystick controls up and down movements
			Set_A2D_Pin(0x00); // Sets analog signal to the left/right axis of the right joystick
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	05 df       	rcall	.-502    	; 0x794 <Set_A2D_Pin>
 98a:	3a df       	rcall	.-396    	; 0x800 <convert>
			convert();
 98c:	88 e7       	ldi	r24, 0x78	; 120
 98e:	90 e0       	ldi	r25, 0x00	; 0
			joystick3 = ADC; // Read ADC value into joystick variable
 990:	fc 01       	movw	r30, r24
 992:	80 81       	ld	r24, Z
 994:	91 81       	ldd	r25, Z+1	; 0x01
 996:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <joystick3+0x1>
 99a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <joystick3>
 99e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
			droneSignal = (droneSignal & 0xFC); // Up/Down set to 00 for maintain altitude
 9a2:	8c 7f       	andi	r24, 0xFC	; 252
 9a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 9a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <joystick3>
			if(joystick3 > 700) // Joystick is being tilted up
 9ac:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <joystick3+0x1>
 9b0:	8d 3b       	cpi	r24, 0xBD	; 189
 9b2:	92 40       	sbci	r25, 0x02	; 2
 9b4:	30 f0       	brcs	.+12     	; 0x9c2 <TickFct_movement+0x18a>
 9b6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
			{
				droneSignal |= 0x01; // Up/Down set to 10 for down
 9ba:	81 60       	ori	r24, 0x01	; 1
 9bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 9c0:	0c c0       	rjmp	.+24     	; 0x9da <TickFct_movement+0x1a2>
 9c2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <joystick3>
			}
			else if(joystick3 < 350) // Joystick is being tilted left
 9c6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <joystick3+0x1>
 9ca:	8e 35       	cpi	r24, 0x5E	; 94
 9cc:	91 40       	sbci	r25, 0x01	; 1
 9ce:	28 f4       	brcc	.+10     	; 0x9da <TickFct_movement+0x1a2>
 9d0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
			{
				droneSignal |= 0x02; // Up/Down set to 01 for up
 9d4:	82 60       	ori	r24, 0x02	; 2
 9d6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 9da:	1a 82       	std	Y+2, r1	; 0x02
 9dc:	19 82       	std	Y+1, r1	; 0x01
			}
			movement_state = left_right; // Return to left right state
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <TickFct_movement+0x1ae>
 9e0:	1a 82       	std	Y+2, r1	; 0x02
			break;
 9e2:	19 82       	std	Y+1, r1	; 0x01
		default:
			movement_state = left_right; // Return to left right state
 9e4:	00 00       	nop
 9e6:	89 81       	ldd	r24, Y+1	; 0x01
			break;
 9e8:	9a 81       	ldd	r25, Y+2	; 0x02
	}
	return movement_state;
 9ea:	0f 90       	pop	r0
 9ec:	0f 90       	pop	r0
}
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	08 95       	ret

000009f4 <TickFct_button>:
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
X1 - Drop it like its hot
*/
enum button_states {buttons} button_state;

int TickFct_button(int button_state)
{	
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <TickFct_button+0x6>
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	9a 83       	std	Y+2, r25	; 0x02
 a00:	89 83       	std	Y+1, r24	; 0x01
	switch(button_state)
 a02:	89 81       	ldd	r24, Y+1	; 0x01
 a04:	9a 81       	ldd	r25, Y+2	; 0x02
 a06:	89 2b       	or	r24, r25
 a08:	09 f0       	breq	.+2      	; 0xa0c <TickFct_button+0x18>
 a0a:	42 c0       	rjmp	.+132    	; 0xa90 <TickFct_button+0x9c>
	{
		case buttons: // Right joystick controls up and down movements
			if(topButton && !bottomButton)
 a0c:	86 e2       	ldi	r24, 0x26	; 38
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	fc 01       	movw	r30, r24
 a12:	80 81       	ld	r24, Z
 a14:	88 2f       	mov	r24, r24
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	81 70       	andi	r24, 0x01	; 1
 a1a:	99 27       	eor	r25, r25
 a1c:	89 2b       	or	r24, r25
 a1e:	01 f5       	brne	.+64     	; 0xa60 <TickFct_button+0x6c>
 a20:	86 e2       	ldi	r24, 0x26	; 38
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	fc 01       	movw	r30, r24
 a26:	80 81       	ld	r24, Z
 a28:	88 2f       	mov	r24, r24
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	82 70       	andi	r24, 0x02	; 2
 a2e:	99 27       	eor	r25, r25
 a30:	89 2b       	or	r24, r25
 a32:	b1 f0       	breq	.+44     	; 0xa60 <TickFct_button+0x6c>
			{
				if(clawFlag == 0) // Engage the claw 
 a34:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <clawFlag>
 a38:	88 23       	and	r24, r24
 a3a:	51 f4       	brne	.+20     	; 0xa50 <TickFct_button+0x5c>
				{
					clawFlag = 1;
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <clawFlag>
					droneSignal = (droneSignal & 0x9F) | 0x40; // Buttons set to 10
 a42:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 a46:	8f 79       	andi	r24, 0x9F	; 159
 a48:	80 64       	ori	r24, 0x40	; 64
 a4a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
	switch(button_state)
	{
		case buttons: // Right joystick controls up and down movements
			if(topButton && !bottomButton)
			{
				if(clawFlag == 0) // Engage the claw 
 a4e:	1d c0       	rjmp	.+58     	; 0xa8a <TickFct_button+0x96>
					clawFlag = 1;
					droneSignal = (droneSignal & 0x9F) | 0x40; // Buttons set to 10
				}
				else // Disengage the claw
				{
					clawFlag = 0;
 a50:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <clawFlag>
					droneSignal = (droneSignal & 0x9F); // Buttons set to 00
 a54:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 a58:	8f 79       	andi	r24, 0x9F	; 159
 a5a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
	switch(button_state)
	{
		case buttons: // Right joystick controls up and down movements
			if(topButton && !bottomButton)
			{
				if(clawFlag == 0) // Engage the claw 
 a5e:	15 c0       	rjmp	.+42     	; 0xa8a <TickFct_button+0x96>
				{
					clawFlag = 0;
					droneSignal = (droneSignal & 0x9F); // Buttons set to 00
				}
			}
			else if(bottomButton) // Button must be held down to prevent accidental drone loss
 a60:	86 e2       	ldi	r24, 0x26	; 38
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	fc 01       	movw	r30, r24
 a66:	80 81       	ld	r24, Z
 a68:	88 2f       	mov	r24, r24
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	82 70       	andi	r24, 0x02	; 2
 a6e:	99 27       	eor	r25, r25
 a70:	89 2b       	or	r24, r25
 a72:	31 f4       	brne	.+12     	; 0xa80 <TickFct_button+0x8c>
			{
				droneSignal = droneSignal | 0x20;
 a74:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 a78:	80 62       	ori	r24, 0x20	; 32
 a7a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 a7e:	05 c0       	rjmp	.+10     	; 0xa8a <TickFct_button+0x96>
			}
			else
			{
				droneSignal = (droneSignal & 0xDF); // buttons set to 00 for unused
 a80:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 a84:	8f 7d       	andi	r24, 0xDF	; 223
 a86:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
			}
			button_state = buttons;
 a8a:	1a 82       	std	Y+2, r1	; 0x02
 a8c:	19 82       	std	Y+1, r1	; 0x01
			break;
 a8e:	03 c0       	rjmp	.+6      	; 0xa96 <TickFct_button+0xa2>
		default:
			button_state = buttons;
 a90:	1a 82       	std	Y+2, r1	; 0x02
 a92:	19 82       	std	Y+1, r1	; 0x01
			break;
 a94:	00 00       	nop
	}
	return button_state;
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	9a 81       	ldd	r25, Y+2	; 0x02
}
 a9a:	0f 90       	pop	r0
 a9c:	0f 90       	pop	r0
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	08 95       	ret

00000aa4 <spi_master>:

// SPI
enum spi_states {wait, send} spi_state;
	
int spi_master(int spi_state)
{
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	00 d0       	rcall	.+0      	; 0xaaa <spi_master+0x6>
 aaa:	00 d0       	rcall	.+0      	; 0xaac <spi_master+0x8>
 aac:	cd b7       	in	r28, 0x3d	; 61
 aae:	de b7       	in	r29, 0x3e	; 62
 ab0:	9c 83       	std	Y+4, r25	; 0x04
 ab2:	8b 83       	std	Y+3, r24	; 0x03
	switch(spi_state)
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	9c 81       	ldd	r25, Y+4	; 0x04
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	19 f0       	breq	.+6      	; 0xac2 <spi_master+0x1e>
 abc:	01 97       	sbiw	r24, 0x01	; 1
 abe:	d1 f1       	breq	.+116    	; 0xb34 <spi_master+0x90>
 ac0:	44 c0       	rjmp	.+136    	; 0xb4a <spi_master+0xa6>
	{
		case wait:
			counter = 0; // Counts the number of bits set to 1
 ac2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <counter>
			for(int i = 0; i < 7; i++)
 ac6:	1a 82       	std	Y+2, r1	; 0x02
 ac8:	19 82       	std	Y+1, r1	; 0x01
 aca:	1b c0       	rjmp	.+54     	; 0xb02 <spi_master+0x5e>
			{
				temp = (droneSignal >> i) &  0x01; // Right shift by i and clear unwanted bits
 acc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 ad0:	88 2f       	mov	r24, r24
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	09 80       	ldd	r0, Y+1	; 0x01
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <spi_master+0x38>
 ad8:	95 95       	asr	r25
 ada:	87 95       	ror	r24
 adc:	0a 94       	dec	r0
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <spi_master+0x34>
 ae0:	81 70       	andi	r24, 0x01	; 1
 ae2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <temp>
				if(temp == 0x01){ counter++;} // If the bit we are checking is set to 1, update the counter
 ae6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <temp>
 aea:	81 30       	cpi	r24, 0x01	; 1
 aec:	29 f4       	brne	.+10     	; 0xaf8 <spi_master+0x54>
 aee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <counter>
 af2:	8f 5f       	subi	r24, 0xFF	; 255
 af4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <counter>
{
	switch(spi_state)
	{
		case wait:
			counter = 0; // Counts the number of bits set to 1
			for(int i = 0; i < 7; i++)
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	9a 81       	ldd	r25, Y+2	; 0x02
 afc:	01 96       	adiw	r24, 0x01	; 1
 afe:	9a 83       	std	Y+2, r25	; 0x02
 b00:	89 83       	std	Y+1, r24	; 0x01
 b02:	89 81       	ldd	r24, Y+1	; 0x01
 b04:	9a 81       	ldd	r25, Y+2	; 0x02
 b06:	07 97       	sbiw	r24, 0x07	; 7
 b08:	0c f3       	brlt	.-62     	; 0xacc <spi_master+0x28>
			{
				temp = (droneSignal >> i) &  0x01; // Right shift by i and clear unwanted bits
				if(temp == 0x01){ counter++;} // If the bit we are checking is set to 1, update the counter
			}
			if((counter % 2) == 0) // Checks whether or not we have an even number of bits
 b0a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <counter>
 b0e:	81 70       	andi	r24, 0x01	; 1
 b10:	88 23       	and	r24, r24
 b12:	31 f4       	brne	.+12     	; 0xb20 <spi_master+0x7c>
			{
				droneSignal = droneSignal & 0x7F; // Set parity bit to 0 for even number of 1s
 b14:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 b18:	8f 77       	andi	r24, 0x7F	; 127
 b1a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
 b1e:	05 c0       	rjmp	.+10     	; 0xb2a <spi_master+0x86>
			}
			else
			{
				droneSignal = droneSignal | 0x80; // Set parity bit to 1 for odd number of 1s
 b20:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 b24:	80 68       	ori	r24, 0x80	; 128
 b26:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
			}
			spi_state = send;
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	9c 83       	std	Y+4, r25	; 0x04
 b30:	8b 83       	std	Y+3, r24	; 0x03
			break;
 b32:	0f c0       	rjmp	.+30     	; 0xb52 <spi_master+0xae>
		case send:
			payload[0] = droneSignal; // Update payload with the droneSignal
 b34:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 b38:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <payload>
			Radio_TxTransmit(payload, 1); // 1 specifies the number of bytes to transmit. 32 is max
 b3c:	61 e0       	ldi	r22, 0x01	; 1
 b3e:	8d e0       	ldi	r24, 0x0D	; 13
 b40:	91 e0       	ldi	r25, 0x01	; 1
 b42:	14 de       	rcall	.-984    	; 0x76c <Radio_TxTransmit>
			spi_state = wait;
 b44:	1c 82       	std	Y+4, r1	; 0x04
 b46:	1b 82       	std	Y+3, r1	; 0x03
			break;
		default:
			Radio_TxInit();
 b48:	04 c0       	rjmp	.+8      	; 0xb52 <spi_master+0xae>
 b4a:	a9 dd       	rcall	.-1198   	; 0x69e <Radio_TxInit>
			spi_state = wait;
 b4c:	1c 82       	std	Y+4, r1	; 0x04
 b4e:	1b 82       	std	Y+3, r1	; 0x03
			break;
 b50:	00 00       	nop
	}
	return spi_state;
 b52:	8b 81       	ldd	r24, Y+3	; 0x03
 b54:	9c 81       	ldd	r25, Y+4	; 0x04
}
 b56:	0f 90       	pop	r0
 b58:	0f 90       	pop	r0
 b5a:	0f 90       	pop	r0
 b5c:	0f 90       	pop	r0
 b5e:	df 91       	pop	r29
 b60:	cf 91       	pop	r28
 b62:	08 95       	ret

00000b64 <main>:


int main(void)
{
 b64:	cf 93       	push	r28
 b66:	df 93       	push	r29
 b68:	1f 92       	push	r1
 b6a:	cd b7       	in	r28, 0x3d	; 61
 b6c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Input from ADC
 b6e:	81 e2       	ldi	r24, 0x21	; 33
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	fc 01       	movw	r30, r24
 b74:	10 82       	st	Z, r1
 b76:	82 e2       	ldi	r24, 0x22	; 34
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	2f ef       	ldi	r18, 0xFF	; 255
 b7c:	fc 01       	movw	r30, r24
 b7e:	20 83       	st	Z, r18
	DDRC = 0x00; PORTC = 0xFF; // Input from buttons
 b80:	87 e2       	ldi	r24, 0x27	; 39
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	fc 01       	movw	r30, r24
 b86:	10 82       	st	Z, r1
 b88:	88 e2       	ldi	r24, 0x28	; 40
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	2f ef       	ldi	r18, 0xFF	; 255
 b8e:	fc 01       	movw	r30, r24
 b90:	20 83       	st	Z, r18
	// DDRD = 0xFF; PORTD = 0x00; // Output for testing
	// Output from RF transmitter will be sent from MOSI do not initialize DDRB 

	A2D_init();
 b92:	25 de       	rcall	.-950    	; 0x7de <A2D_init>
	//SPI_MasterInit();
	TimerSet(timerPeriod);
 b94:	61 e0       	ldi	r22, 0x01	; 1
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 b9c:	f1 db       	rcall	.-2078   	; 0x380 <TimerSet>
 b9e:	1e dc       	rcall	.-1988   	; 0x3dc <TimerOn>

	unsigned char i = 0;
 ba0:	19 82       	std	Y+1, r1	; 0x01
	tasks[i].state = -1;
 ba2:	89 81       	ldd	r24, Y+1	; 0x01
 ba4:	28 2f       	mov	r18, r24
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	4b e0       	ldi	r20, 0x0B	; 11
 baa:	42 9f       	mul	r20, r18
 bac:	c0 01       	movw	r24, r0
 bae:	43 9f       	mul	r20, r19
 bb0:	90 0d       	add	r25, r0
 bb2:	11 24       	eor	r1, r1
 bb4:	8d 5e       	subi	r24, 0xED	; 237
 bb6:	9e 4f       	sbci	r25, 0xFE	; 254
 bb8:	2f ef       	ldi	r18, 0xFF	; 255
 bba:	fc 01       	movw	r30, r24
 bbc:	20 83       	st	Z, r18
	tasks[i].period = 50;
 bbe:	89 81       	ldd	r24, Y+1	; 0x01
 bc0:	28 2f       	mov	r18, r24
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	4b e0       	ldi	r20, 0x0B	; 11
 bc6:	42 9f       	mul	r20, r18
 bc8:	c0 01       	movw	r24, r0
 bca:	43 9f       	mul	r20, r19
 bcc:	90 0d       	add	r25, r0
 bce:	11 24       	eor	r1, r1
 bd0:	9c 01       	movw	r18, r24
 bd2:	2c 5e       	subi	r18, 0xEC	; 236
 bd4:	3e 4f       	sbci	r19, 0xFE	; 254
 bd6:	82 e3       	ldi	r24, 0x32	; 50
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	a0 e0       	ldi	r26, 0x00	; 0
 bdc:	b0 e0       	ldi	r27, 0x00	; 0
 bde:	f9 01       	movw	r30, r18
 be0:	80 83       	st	Z, r24
 be2:	91 83       	std	Z+1, r25	; 0x01
 be4:	a2 83       	std	Z+2, r26	; 0x02
 be6:	b3 83       	std	Z+3, r27	; 0x03
	tasks[i].elapsedTime = 0;
 be8:	89 81       	ldd	r24, Y+1	; 0x01
 bea:	28 2f       	mov	r18, r24
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	4b e0       	ldi	r20, 0x0B	; 11
 bf0:	42 9f       	mul	r20, r18
 bf2:	c0 01       	movw	r24, r0
 bf4:	43 9f       	mul	r20, r19
 bf6:	90 0d       	add	r25, r0
 bf8:	11 24       	eor	r1, r1
 bfa:	88 5e       	subi	r24, 0xE8	; 232
 bfc:	9e 4f       	sbci	r25, 0xFE	; 254
 bfe:	fc 01       	movw	r30, r24
 c00:	10 82       	st	Z, r1
 c02:	11 82       	std	Z+1, r1	; 0x01
 c04:	12 82       	std	Z+2, r1	; 0x02
 c06:	13 82       	std	Z+3, r1	; 0x03
	tasks[i].TickFct = &TickFct_movement;
 c08:	89 81       	ldd	r24, Y+1	; 0x01
 c0a:	28 2f       	mov	r18, r24
 c0c:	30 e0       	ldi	r19, 0x00	; 0
 c0e:	4b e0       	ldi	r20, 0x0B	; 11
 c10:	42 9f       	mul	r20, r18
 c12:	c0 01       	movw	r24, r0
 c14:	43 9f       	mul	r20, r19
 c16:	90 0d       	add	r25, r0
 c18:	11 24       	eor	r1, r1
 c1a:	84 5e       	subi	r24, 0xE4	; 228
 c1c:	9e 4f       	sbci	r25, 0xFE	; 254
 c1e:	2c e1       	ldi	r18, 0x1C	; 28
 c20:	34 e0       	ldi	r19, 0x04	; 4
 c22:	fc 01       	movw	r30, r24
 c24:	31 83       	std	Z+1, r19	; 0x01
 c26:	20 83       	st	Z, r18
	i++;
 c28:	89 81       	ldd	r24, Y+1	; 0x01
 c2a:	8f 5f       	subi	r24, 0xFF	; 255
 c2c:	89 83       	std	Y+1, r24	; 0x01
 	tasks[i].state = -1;
 c2e:	89 81       	ldd	r24, Y+1	; 0x01
 c30:	28 2f       	mov	r18, r24
 c32:	30 e0       	ldi	r19, 0x00	; 0
 c34:	4b e0       	ldi	r20, 0x0B	; 11
 c36:	42 9f       	mul	r20, r18
 c38:	c0 01       	movw	r24, r0
 c3a:	43 9f       	mul	r20, r19
 c3c:	90 0d       	add	r25, r0
 c3e:	11 24       	eor	r1, r1
 c40:	8d 5e       	subi	r24, 0xED	; 237
 c42:	9e 4f       	sbci	r25, 0xFE	; 254
 c44:	2f ef       	ldi	r18, 0xFF	; 255
 c46:	fc 01       	movw	r30, r24
 c48:	20 83       	st	Z, r18
 	tasks[i].period = 50;
 c4a:	89 81       	ldd	r24, Y+1	; 0x01
 c4c:	28 2f       	mov	r18, r24
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	4b e0       	ldi	r20, 0x0B	; 11
 c52:	42 9f       	mul	r20, r18
 c54:	c0 01       	movw	r24, r0
 c56:	43 9f       	mul	r20, r19
 c58:	90 0d       	add	r25, r0
 c5a:	11 24       	eor	r1, r1
 c5c:	9c 01       	movw	r18, r24
 c5e:	2c 5e       	subi	r18, 0xEC	; 236
 c60:	3e 4f       	sbci	r19, 0xFE	; 254
 c62:	82 e3       	ldi	r24, 0x32	; 50
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	a0 e0       	ldi	r26, 0x00	; 0
 c68:	b0 e0       	ldi	r27, 0x00	; 0
 c6a:	f9 01       	movw	r30, r18
 c6c:	80 83       	st	Z, r24
 c6e:	91 83       	std	Z+1, r25	; 0x01
 c70:	a2 83       	std	Z+2, r26	; 0x02
 c72:	b3 83       	std	Z+3, r27	; 0x03
 	tasks[i].elapsedTime = 0;
 c74:	89 81       	ldd	r24, Y+1	; 0x01
 c76:	28 2f       	mov	r18, r24
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	4b e0       	ldi	r20, 0x0B	; 11
 c7c:	42 9f       	mul	r20, r18
 c7e:	c0 01       	movw	r24, r0
 c80:	43 9f       	mul	r20, r19
 c82:	90 0d       	add	r25, r0
 c84:	11 24       	eor	r1, r1
 c86:	88 5e       	subi	r24, 0xE8	; 232
 c88:	9e 4f       	sbci	r25, 0xFE	; 254
 c8a:	fc 01       	movw	r30, r24
 c8c:	10 82       	st	Z, r1
 c8e:	11 82       	std	Z+1, r1	; 0x01
 c90:	12 82       	std	Z+2, r1	; 0x02
 c92:	13 82       	std	Z+3, r1	; 0x03
 	tasks[i].TickFct = &TickFct_button;
 c94:	89 81       	ldd	r24, Y+1	; 0x01
 c96:	28 2f       	mov	r18, r24
 c98:	30 e0       	ldi	r19, 0x00	; 0
 c9a:	4b e0       	ldi	r20, 0x0B	; 11
 c9c:	42 9f       	mul	r20, r18
 c9e:	c0 01       	movw	r24, r0
 ca0:	43 9f       	mul	r20, r19
 ca2:	90 0d       	add	r25, r0
 ca4:	11 24       	eor	r1, r1
 ca6:	84 5e       	subi	r24, 0xE4	; 228
 ca8:	9e 4f       	sbci	r25, 0xFE	; 254
 caa:	2a ef       	ldi	r18, 0xFA	; 250
 cac:	34 e0       	ldi	r19, 0x04	; 4
 cae:	fc 01       	movw	r30, r24
 cb0:	31 83       	std	Z+1, r19	; 0x01
 cb2:	20 83       	st	Z, r18
	i++;
 cb4:	89 81       	ldd	r24, Y+1	; 0x01
 cb6:	8f 5f       	subi	r24, 0xFF	; 255
 cb8:	89 83       	std	Y+1, r24	; 0x01
	tasks[i].state = -1;
 cba:	89 81       	ldd	r24, Y+1	; 0x01
 cbc:	28 2f       	mov	r18, r24
 cbe:	30 e0       	ldi	r19, 0x00	; 0
 cc0:	4b e0       	ldi	r20, 0x0B	; 11
 cc2:	42 9f       	mul	r20, r18
 cc4:	c0 01       	movw	r24, r0
 cc6:	43 9f       	mul	r20, r19
 cc8:	90 0d       	add	r25, r0
 cca:	11 24       	eor	r1, r1
 ccc:	8d 5e       	subi	r24, 0xED	; 237
 cce:	9e 4f       	sbci	r25, 0xFE	; 254
 cd0:	2f ef       	ldi	r18, 0xFF	; 255
 cd2:	fc 01       	movw	r30, r24
 cd4:	20 83       	st	Z, r18
	tasks[i].period = 25;
 cd6:	89 81       	ldd	r24, Y+1	; 0x01
 cd8:	28 2f       	mov	r18, r24
 cda:	30 e0       	ldi	r19, 0x00	; 0
 cdc:	4b e0       	ldi	r20, 0x0B	; 11
 cde:	42 9f       	mul	r20, r18
 ce0:	c0 01       	movw	r24, r0
 ce2:	43 9f       	mul	r20, r19
 ce4:	90 0d       	add	r25, r0
 ce6:	11 24       	eor	r1, r1
 ce8:	9c 01       	movw	r18, r24
 cea:	2c 5e       	subi	r18, 0xEC	; 236
 cec:	3e 4f       	sbci	r19, 0xFE	; 254
 cee:	89 e1       	ldi	r24, 0x19	; 25
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	a0 e0       	ldi	r26, 0x00	; 0
 cf4:	b0 e0       	ldi	r27, 0x00	; 0
 cf6:	f9 01       	movw	r30, r18
 cf8:	80 83       	st	Z, r24
 cfa:	91 83       	std	Z+1, r25	; 0x01
 cfc:	a2 83       	std	Z+2, r26	; 0x02
 cfe:	b3 83       	std	Z+3, r27	; 0x03
	tasks[i].elapsedTime = 0;
 d00:	89 81       	ldd	r24, Y+1	; 0x01
 d02:	28 2f       	mov	r18, r24
 d04:	30 e0       	ldi	r19, 0x00	; 0
 d06:	4b e0       	ldi	r20, 0x0B	; 11
 d08:	42 9f       	mul	r20, r18
 d0a:	c0 01       	movw	r24, r0
 d0c:	43 9f       	mul	r20, r19
 d0e:	90 0d       	add	r25, r0
 d10:	11 24       	eor	r1, r1
 d12:	88 5e       	subi	r24, 0xE8	; 232
 d14:	9e 4f       	sbci	r25, 0xFE	; 254
 d16:	fc 01       	movw	r30, r24
 d18:	10 82       	st	Z, r1
 d1a:	11 82       	std	Z+1, r1	; 0x01
 d1c:	12 82       	std	Z+2, r1	; 0x02
 d1e:	13 82       	std	Z+3, r1	; 0x03
	tasks[i].TickFct = &spi_master;
 d20:	89 81       	ldd	r24, Y+1	; 0x01
 d22:	28 2f       	mov	r18, r24
 d24:	30 e0       	ldi	r19, 0x00	; 0
 d26:	4b e0       	ldi	r20, 0x0B	; 11
 d28:	42 9f       	mul	r20, r18
 d2a:	c0 01       	movw	r24, r0
 d2c:	43 9f       	mul	r20, r19
 d2e:	90 0d       	add	r25, r0
 d30:	11 24       	eor	r1, r1
 d32:	84 5e       	subi	r24, 0xE4	; 228
 d34:	9e 4f       	sbci	r25, 0xFE	; 254
 d36:	22 e5       	ldi	r18, 0x52	; 82
 d38:	35 e0       	ldi	r19, 0x05	; 5
 d3a:	fc 01       	movw	r30, r24
 d3c:	31 83       	std	Z+1, r19	; 0x01
 d3e:	20 83       	st	Z, r18

	while (1)
	{
		//PORTD = droneSignal; // Test that we are generating the correct signal DELETE ONCE DONE
	}
 d40:	ff cf       	rjmp	.-2      	; 0xd40 <main+0x1dc>

00000d42 <_exit>:
 d42:	f8 94       	cli

00000d44 <__stop_program>:
 d44:	ff cf       	rjmp	.-2      	; 0xd44 <__stop_program>
