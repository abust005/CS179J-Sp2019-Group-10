
MADLADS_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000abe  00000b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800104  00800104  00000b56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c68  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c5  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075a  00000000  00000000  00002195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  000028f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062b  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d9  00000000  00000000  000031df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000037b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	71 c1       	rjmp	.+738    	; 0x2ec <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fa c0       	rjmp	.+500    	; 0x22a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c2       	rjmp	.+1192   	; 0x4f6 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 34       	cpi	r26, 0x46	; 70
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bf d3       	rcall	.+1918   	; 0x842 <main>
  c4:	fa c4       	rjmp	.+2548   	; 0xaba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
	DDRB |= (0<<DDB4)|(0<<DDB5)|(1<<DDB6)|(0<<DDB7);
	// set SPR register to enable SPI and enable SPI interrupt (pg. 168)
	SPCR |= (1<<SPIE)|(1<<SPE);
	// make sure global interrupts are enabled on SREG register (pg. 9)
	SREG |= 0x80;
}
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i.1615>
  d8:	9d c0       	rjmp	.+314    	; 0x214 <TimerISR+0x14c>
  da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	4b e0       	ldi	r20, 0x0B	; 11
  e4:	42 9f       	mul	r20, r18
  e6:	c0 01       	movw	r24, r0
  e8:	43 9f       	mul	r20, r19
  ea:	90 0d       	add	r25, r0
  ec:	11 24       	eor	r1, r1
  ee:	89 5e       	subi	r24, 0xE9	; 233
  f0:	9e 4f       	sbci	r25, 0xFE	; 254
  f2:	fc 01       	movw	r30, r24
  f4:	20 81       	ld	r18, Z
  f6:	31 81       	ldd	r19, Z+1	; 0x01
  f8:	42 81       	ldd	r20, Z+2	; 0x02
  fa:	53 81       	ldd	r21, Z+3	; 0x03
  fc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 100:	68 2f       	mov	r22, r24
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	eb e0       	ldi	r30, 0x0B	; 11
 106:	e6 9f       	mul	r30, r22
 108:	c0 01       	movw	r24, r0
 10a:	e7 9f       	mul	r30, r23
 10c:	90 0d       	add	r25, r0
 10e:	11 24       	eor	r1, r1
 110:	8d 5e       	subi	r24, 0xED	; 237
 112:	9e 4f       	sbci	r25, 0xFE	; 254
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	a2 81       	ldd	r26, Z+2	; 0x02
 11c:	b3 81       	ldd	r27, Z+3	; 0x03
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	4a 07       	cpc	r20, r26
 124:	5b 07       	cpc	r21, r27
 126:	08 f4       	brcc	.+2      	; 0x12a <TimerISR+0x62>
 128:	42 c0       	rjmp	.+132    	; 0x1ae <TimerISR+0xe6>
 12a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 12e:	08 2f       	mov	r16, r24
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	4b e0       	ldi	r20, 0x0B	; 11
 13c:	42 9f       	mul	r20, r18
 13e:	c0 01       	movw	r24, r0
 140:	43 9f       	mul	r20, r19
 142:	90 0d       	add	r25, r0
 144:	11 24       	eor	r1, r1
 146:	85 5e       	subi	r24, 0xE5	; 229
 148:	9e 4f       	sbci	r25, 0xFE	; 254
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	31 81       	ldd	r19, Z+1	; 0x01
 150:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 154:	48 2f       	mov	r20, r24
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	6b e0       	ldi	r22, 0x0B	; 11
 15a:	64 9f       	mul	r22, r20
 15c:	c0 01       	movw	r24, r0
 15e:	65 9f       	mul	r22, r21
 160:	90 0d       	add	r25, r0
 162:	11 24       	eor	r1, r1
 164:	8e 5e       	subi	r24, 0xEE	; 238
 166:	9e 4f       	sbci	r25, 0xFE	; 254
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	08 2e       	mov	r0, r24
 16e:	00 0c       	add	r0, r0
 170:	99 0b       	sbc	r25, r25
 172:	f9 01       	movw	r30, r18
 174:	09 95       	icall
 176:	38 2f       	mov	r19, r24
 178:	2b e0       	ldi	r18, 0x0B	; 11
 17a:	20 9f       	mul	r18, r16
 17c:	c0 01       	movw	r24, r0
 17e:	21 9f       	mul	r18, r17
 180:	90 0d       	add	r25, r0
 182:	11 24       	eor	r1, r1
 184:	8e 5e       	subi	r24, 0xEE	; 238
 186:	9e 4f       	sbci	r25, 0xFE	; 254
 188:	fc 01       	movw	r30, r24
 18a:	30 83       	st	Z, r19
 18c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4b e0       	ldi	r20, 0x0B	; 11
 196:	42 9f       	mul	r20, r18
 198:	c0 01       	movw	r24, r0
 19a:	43 9f       	mul	r20, r19
 19c:	90 0d       	add	r25, r0
 19e:	11 24       	eor	r1, r1
 1a0:	89 5e       	subi	r24, 0xE9	; 233
 1a2:	9e 4f       	sbci	r25, 0xFE	; 254
 1a4:	fc 01       	movw	r30, r24
 1a6:	10 82       	st	Z, r1
 1a8:	11 82       	std	Z+1, r1	; 0x01
 1aa:	12 82       	std	Z+2, r1	; 0x02
 1ac:	13 82       	std	Z+3, r1	; 0x03
 1ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 1b2:	68 2f       	mov	r22, r24
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	4b e0       	ldi	r20, 0x0B	; 11
 1c0:	42 9f       	mul	r20, r18
 1c2:	c0 01       	movw	r24, r0
 1c4:	43 9f       	mul	r20, r19
 1c6:	90 0d       	add	r25, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	89 5e       	subi	r24, 0xE9	; 233
 1cc:	9e 4f       	sbci	r25, 0xFE	; 254
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 81       	ld	r18, Z
 1d2:	31 81       	ldd	r19, Z+1	; 0x01
 1d4:	42 81       	ldd	r20, Z+2	; 0x02
 1d6:	53 81       	ldd	r21, Z+3	; 0x03
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	a4 1f       	adc	r26, r20
 1ee:	b5 1f       	adc	r27, r21
 1f0:	4b e0       	ldi	r20, 0x0B	; 11
 1f2:	46 9f       	mul	r20, r22
 1f4:	90 01       	movw	r18, r0
 1f6:	47 9f       	mul	r20, r23
 1f8:	30 0d       	add	r19, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	29 5e       	subi	r18, 0xE9	; 233
 1fe:	3e 4f       	sbci	r19, 0xFE	; 254
 200:	f9 01       	movw	r30, r18
 202:	80 83       	st	Z, r24
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	a2 83       	std	Z+2, r26	; 0x02
 208:	b3 83       	std	Z+3, r27	; 0x03
 20a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.1615>
 214:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1615>
 218:	84 30       	cpi	r24, 0x04	; 4
 21a:	08 f4       	brcc	.+2      	; 0x21e <TimerISR+0x156>
 21c:	5e cf       	rjmp	.-324    	; 0xda <TimerISR+0x12>
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <__vector_13>:
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 23a:	0f 92       	push	r0
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 260:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 264:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 268:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	a1 09       	sbc	r26, r1
 270:	b1 09       	sbc	r27, r1
 272:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 276:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 27a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 27e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 282:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 286:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 28a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 28e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 292:	89 2b       	or	r24, r25
 294:	8a 2b       	or	r24, r26
 296:	8b 2b       	or	r24, r27
 298:	89 f4       	brne	.+34     	; 0x2bc <__vector_13+0x92>
 29a:	16 df       	rcall	.-468    	; 0xc8 <TimerISR>
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2a4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2a8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2b0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2b4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 2b8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 2bc:	00 00       	nop
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2e0:	0f 90       	pop	r0
 2e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_2>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2fc:	0f 92       	push	r0
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sonar_flag>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	a9 f4       	brne	.+42     	; 0x344 <__vector_2+0x58>
 31a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sonar_flag>
 31e:	81 e9       	ldi	r24, 0x91	; 145
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	10 82       	st	Z, r1
 326:	84 e9       	ldi	r24, 0x94	; 148
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	91 81       	ldd	r25, Z+1	; 0x01
 330:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <sonar+0x1>
 334:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sonar>
 338:	84 e9       	ldi	r24, 0x94	; 148
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	fc 01       	movw	r30, r24
 33e:	11 82       	std	Z+1, r1	; 0x01
 340:	10 82       	st	Z, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <__vector_2+0x70>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sonar_flag>
 34a:	81 e9       	ldi	r24, 0x91	; 145
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	21 e9       	ldi	r18, 0x91	; 145
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	22 60       	ori	r18, 0x02	; 2
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
 35c:	00 00       	nop
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 374:	0f 90       	pop	r0
 376:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <TimerSet>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <TimerSet+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <TimerSet+0x8>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	69 83       	std	Y+1, r22	; 0x01
 38e:	7a 83       	std	Y+2, r23	; 0x02
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	9c 83       	std	Y+4, r25	; 0x04
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	ab 81       	ldd	r26, Y+3	; 0x03
 39a:	bc 81       	ldd	r27, Y+4	; 0x04
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 3c4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 3c8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 3cc:	00 00       	nop
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <TimerOn>:
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	81 e8       	ldi	r24, 0x81	; 129
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2b e0       	ldi	r18, 0x0B	; 11
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	88 e8       	ldi	r24, 0x88	; 136
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2d e7       	ldi	r18, 0x7D	; 125
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	fc 01       	movw	r30, r24
 3f8:	31 83       	std	Z+1, r19	; 0x01
 3fa:	20 83       	st	Z, r18
 3fc:	8f e6       	ldi	r24, 0x6F	; 111
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	22 e0       	ldi	r18, 0x02	; 2
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
 406:	84 e8       	ldi	r24, 0x84	; 132
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	fc 01       	movw	r30, r24
 40c:	11 82       	std	Z+1, r1	; 0x01
 40e:	10 82       	st	Z, r1
 410:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 414:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 418:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 41c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 420:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 424:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 428:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 42c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 430:	8f e5       	ldi	r24, 0x5F	; 95
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	2f e5       	ldi	r18, 0x5F	; 95
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	20 68       	ori	r18, 0x80	; 128
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
 442:	00 00       	nop
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <SPI_MasterInit>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	84 e2       	ldi	r24, 0x24	; 36
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	24 e2       	ldi	r18, 0x24	; 36
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	20 6b       	ori	r18, 0xB0	; 176
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
 464:	8c e4       	ldi	r24, 0x4C	; 76
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	2c e4       	ldi	r18, 0x4C	; 76
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	f9 01       	movw	r30, r18
 46e:	20 81       	ld	r18, Z
 470:	21 65       	ori	r18, 0x51	; 81
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
 476:	8f e5       	ldi	r24, 0x5F	; 95
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	2f e5       	ldi	r18, 0x5F	; 95
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	f9 01       	movw	r30, r18
 480:	20 81       	ld	r18, Z
 482:	20 68       	ori	r18, 0x80	; 128
 484:	fc 01       	movw	r30, r24
 486:	20 83       	st	Z, r18
 488:	00 00       	nop
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <SPI_MasterTransmit>:
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	1f 92       	push	r1
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	84 e2       	ldi	r24, 0x24	; 36
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	24 e2       	ldi	r18, 0x24	; 36
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	f9 01       	movw	r30, r18
 4a6:	20 81       	ld	r18, Z
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18
 4ac:	8e e4       	ldi	r24, 0x4E	; 78
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	fc 01       	movw	r30, r24
 4b2:	10 82       	st	Z, r1
 4b4:	00 00       	nop
 4b6:	8d e4       	ldi	r24, 0x4D	; 77
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	80 81       	ld	r24, Z
 4be:	88 23       	and	r24, r24
 4c0:	d4 f7       	brge	.-12     	; 0x4b6 <SPI_MasterTransmit+0x26>
 4c2:	8e e4       	ldi	r24, 0x4E	; 78
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	29 81       	ldd	r18, Y+1	; 0x01
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
 4cc:	00 00       	nop
 4ce:	8d e4       	ldi	r24, 0x4D	; 77
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	fc 01       	movw	r30, r24
 4d4:	80 81       	ld	r24, Z
 4d6:	88 23       	and	r24, r24
 4d8:	d4 f7       	brge	.-12     	; 0x4ce <SPI_MasterTransmit+0x3e>
 4da:	84 e2       	ldi	r24, 0x24	; 36
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	24 e2       	ldi	r18, 0x24	; 36
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	20 81       	ld	r18, Z
 4e6:	20 61       	ori	r18, 0x10	; 16
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
 4ec:	00 00       	nop
 4ee:	0f 90       	pop	r0
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <__vector_19>:

ISR(SPI_STC_vect) { // this is enabled in with the SPCR register’s “SPI Interrupt Enable”
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 506:	0f 92       	push	r0
 508:	8f 93       	push	r24
 50a:	9f 93       	push	r25
 50c:	ef 93       	push	r30
 50e:	ff 93       	push	r31
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
	// SPDR contains the received data, e.g. unsigned char receivedData = SPDR;
	receivedData = SPDR;
 518:	8e e4       	ldi	r24, 0x4E	; 78
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	fc 01       	movw	r30, r24
 51e:	80 81       	ld	r24, Z
 520:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <receivedData>
}
 524:	00 00       	nop
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	0f 90       	pop	r0
 534:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 538:	0f 90       	pop	r0
 53a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <Set_A2D_Pin>:
// Pins on PORTA are used as input for A2D conversion
// The Default Channel is 0 (PA0)
// The value of pinNum determines the pin on PORTA used for A2D conversion
// Valid values range between 0 and 7, where the value represents the desired pin for A2D conversion
void Set_A2D_Pin(unsigned char pinNum)
{
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	1f 92       	push	r1
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 550:	8c e7       	ldi	r24, 0x7C	; 124
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	29 81       	ldd	r18, Y+1	; 0x01
 556:	28 30       	cpi	r18, 0x08	; 8
 558:	28 f0       	brcs	.+10     	; 0x564 <Set_A2D_Pin+0x20>
 55a:	2c e7       	ldi	r18, 0x7C	; 124
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	f9 01       	movw	r30, r18
 560:	20 81       	ld	r18, Z
 562:	01 c0       	rjmp	.+2      	; 0x566 <Set_A2D_Pin+0x22>
 564:	29 81       	ldd	r18, Y+1	; 0x01
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
	// Allow channel to stabilize
	static unsigned char i = 0;
	for(i = 0; i < 15; ++i){asm("nop");}
 56a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <i.1664>
 56e:	06 c0       	rjmp	.+12     	; 0x57c <Set_A2D_Pin+0x38>
 570:	00 00       	nop
 572:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1664>
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i.1664>
 57c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1664>
 580:	8f 30       	cpi	r24, 0x0F	; 15
 582:	b0 f3       	brcs	.-20     	; 0x570 <Set_A2D_Pin+0x2c>
}
 584:	00 00       	nop
 586:	0f 90       	pop	r0
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <A2D_init>:

// ADEN: Enables analog-to-digital conversion
// ADSC: Starts analog-to-digital conversion
// ADATE: Enables auto-triggering, allowing for constant
//		  analog to digital conversions.
void A2D_init() { ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);}
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
 596:	8a e7       	ldi	r24, 0x7A	; 122
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	2a e7       	ldi	r18, 0x7A	; 122
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	f9 01       	movw	r30, r18
 5a0:	20 81       	ld	r18, Z
 5a2:	20 6e       	ori	r18, 0xE0	; 224
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 83       	st	Z, r18
 5a8:	00 00       	nop
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <convert>:

void convert(){
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADSC); // start ADC conversion
 5b8:	8a e7       	ldi	r24, 0x7A	; 122
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	2a e7       	ldi	r18, 0x7A	; 122
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	20 81       	ld	r18, Z
 5c4:	20 64       	ori	r18, 0x40	; 64
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
	while ( !(ADCSRA & (1<<ADIF))); // wait till ADC conversion
 5ca:	00 00       	nop
 5cc:	8a e7       	ldi	r24, 0x7A	; 122
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	88 2f       	mov	r24, r24
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	80 71       	andi	r24, 0x10	; 16
 5da:	99 27       	eor	r25, r25
 5dc:	89 2b       	or	r24, r25
 5de:	b1 f3       	breq	.-20     	; 0x5cc <convert+0x1c>
}
 5e0:	00 00       	nop
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <TickFct_movement>:
111 - N/A
*/
enum movement_states {left_right, forward_reverse} movement_state;

int TickFct_movement(int movement_state)
{
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <TickFct_movement+0x6>
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
 5f2:	9a 83       	std	Y+2, r25	; 0x02
 5f4:	89 83       	std	Y+1, r24	; 0x01
	switch(movement_state)
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	9a 81       	ldd	r25, Y+2	; 0x02
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	19 f0       	breq	.+6      	; 0x604 <TickFct_movement+0x1c>
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	91 f1       	breq	.+100    	; 0x666 <TickFct_movement+0x7e>
 602:	5a c0       	rjmp	.+180    	; 0x6b8 <TickFct_movement+0xd0>
	{
		case left_right: // Right joystick controls left and right movements
			Set_A2D_Pin(0x02); // Sets analog signal to the left/right axis of the right joystick
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	9e df       	rcall	.-196    	; 0x544 <Set_A2D_Pin>
			convert();
 608:	d3 df       	rcall	.-90     	; 0x5b0 <convert>
 60a:	88 e7       	ldi	r24, 0x78	; 120
			joystick = ADC; // Read ADC value into joystick variable
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	fc 01       	movw	r30, r24
 610:	80 81       	ld	r24, Z
 612:	91 81       	ldd	r25, Z+1	; 0x01
 614:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <joystick+0x1>
 618:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <joystick>
 61c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
			droneSignal = (droneSignal & 0xE3); // L/R/F/R set to 000 for hover
 620:	83 7e       	andi	r24, 0xE3	; 227
 622:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 626:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <joystick>
			if(joystick > 700) // Joystick is being tilted left
 62a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <joystick+0x1>
 62e:	8d 3b       	cpi	r24, 0xBD	; 189
 630:	92 40       	sbci	r25, 0x02	; 2
 632:	38 f0       	brcs	.+14     	; 0x642 <TickFct_movement+0x5a>
 634:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
			{
				droneSignal = ((droneSignal & 0xE3) | 0x10); // L/R set to 100 for left 
 638:	83 7e       	andi	r24, 0xE3	; 227
 63a:	80 61       	ori	r24, 0x10	; 16
 63c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 640:	0d c0       	rjmp	.+26     	; 0x65c <TickFct_movement+0x74>
 642:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <joystick>
			}
			else if(joystick < 350) // Joystick is being tilted right
 646:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <joystick+0x1>
 64a:	8e 35       	cpi	r24, 0x5E	; 94
 64c:	91 40       	sbci	r25, 0x01	; 1
 64e:	30 f4       	brcc	.+12     	; 0x65c <TickFct_movement+0x74>
 650:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
			{
				droneSignal = ((droneSignal & 0xE3) | 0x04); // L/R set to 001 for right
 654:	83 7e       	andi	r24, 0xE3	; 227
 656:	84 60       	ori	r24, 0x04	; 4
 658:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 65c:	81 e0       	ldi	r24, 0x01	; 1
			}
			movement_state = forward_reverse;
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	9a 83       	std	Y+2, r25	; 0x02
 662:	89 83       	std	Y+1, r24	; 0x01
 664:	2c c0       	rjmp	.+88     	; 0x6be <TickFct_movement+0xd6>
			break;
		case forward_reverse: // Left joystick controls forward and reverse movements
			Set_A2D_Pin(0x03); // Sets analog signal to the left/right axis of the right joystick
 666:	83 e0       	ldi	r24, 0x03	; 3
 668:	6d df       	rcall	.-294    	; 0x544 <Set_A2D_Pin>
			convert();
 66a:	a2 df       	rcall	.-188    	; 0x5b0 <convert>
 66c:	88 e7       	ldi	r24, 0x78	; 120
			joystick2 = ADC; // Read ADC value into joystick2 variable
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	fc 01       	movw	r30, r24
 672:	80 81       	ld	r24, Z
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <joystick2+0x1>
 67a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <joystick2>
 67e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <joystick2>
			if(joystick2 > 700) // Joystick is being tilted up
 682:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <joystick2+0x1>
 686:	8d 3b       	cpi	r24, 0xBD	; 189
 688:	92 40       	sbci	r25, 0x02	; 2
 68a:	30 f0       	brcs	.+12     	; 0x698 <TickFct_movement+0xb0>
 68c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
			{
				droneSignal = (droneSignal | 0x08); // F/R set to 1 for forward
 690:	88 60       	ori	r24, 0x08	; 8
 692:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 696:	0d c0       	rjmp	.+26     	; 0x6b2 <TickFct_movement+0xca>
 698:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <joystick2>
			}
			else if(joystick2 < 350) // Joystick is being tilted down
 69c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <joystick2+0x1>
 6a0:	8e 35       	cpi	r24, 0x5E	; 94
 6a2:	91 40       	sbci	r25, 0x01	; 1
 6a4:	30 f4       	brcc	.+12     	; 0x6b2 <TickFct_movement+0xca>
 6a6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
			{
				droneSignal = (droneSignal & 0xF7) | 0x14; // F/R set to 101 for reverse
 6aa:	83 7e       	andi	r24, 0xE3	; 227
 6ac:	84 61       	ori	r24, 0x14	; 20
 6ae:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 6b2:	1a 82       	std	Y+2, r1	; 0x02
			}
			movement_state = left_right; // Return to left right state
 6b4:	19 82       	std	Y+1, r1	; 0x01
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <TickFct_movement+0xd6>
			break;
 6b8:	1a 82       	std	Y+2, r1	; 0x02
		default:
			movement_state = left_right;
 6ba:	19 82       	std	Y+1, r1	; 0x01
 6bc:	00 00       	nop
			break;
 6be:	89 81       	ldd	r24, Y+1	; 0x01
	}
	return movement_state;
 6c0:	9a 81       	ldd	r25, Y+2	; 0x02
 6c2:	0f 90       	pop	r0
}
 6c4:	0f 90       	pop	r0
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <TickFct_altitude>:
 6cc:	cf 93       	push	r28
11 - N/A
*/
enum altitude_states {up_down} altitude_state;

int TickFct_altitude(int altitude_state)
{
 6ce:	df 93       	push	r29
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <TickFct_altitude+0x6>
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	9a 83       	std	Y+2, r25	; 0x02
 6d8:	89 83       	std	Y+1, r24	; 0x01
	switch(altitude_state)
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	9a 81       	ldd	r25, Y+2	; 0x02
 6de:	89 2b       	or	r24, r25
 6e0:	79 f5       	brne	.+94     	; 0x740 <TickFct_altitude+0x74>
	{
		case up_down: // Right joystick controls up and down movements
			Set_A2D_Pin(0x00); // Sets analog signal to the left/right axis of the right joystick
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	2f df       	rcall	.-418    	; 0x544 <Set_A2D_Pin>
			convert();
 6e6:	64 df       	rcall	.-312    	; 0x5b0 <convert>
 6e8:	88 e7       	ldi	r24, 0x78	; 120
			joystick3 = ADC; // Read ADC value into joystick variable
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	fc 01       	movw	r30, r24
 6ee:	80 81       	ld	r24, Z
 6f0:	91 81       	ldd	r25, Z+1	; 0x01
 6f2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <joystick3+0x1>
 6f6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <joystick3>
 6fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
			droneSignal = (droneSignal & 0xFC); // Up/Down set to 00 for maintain altitude
 6fe:	8c 7f       	andi	r24, 0xFC	; 252
 700:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 704:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <joystick>
			if(joystick > 700) // Joystick is being tilted up
 708:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <joystick+0x1>
 70c:	8d 3b       	cpi	r24, 0xBD	; 189
 70e:	92 40       	sbci	r25, 0x02	; 2
 710:	38 f0       	brcs	.+14     	; 0x720 <TickFct_altitude+0x54>
 712:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
			{
				droneSignal = ((droneSignal & 0xFC) | 0x02); // Up/Down set to 10 for up
 716:	8c 7f       	andi	r24, 0xFC	; 252
 718:	82 60       	ori	r24, 0x02	; 2
 71a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 71e:	0d c0       	rjmp	.+26     	; 0x73a <TickFct_altitude+0x6e>
 720:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <joystick>
			}
			else if(joystick < 350) // Joystick is being tilted left
 724:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <joystick+0x1>
 728:	8e 35       	cpi	r24, 0x5E	; 94
 72a:	91 40       	sbci	r25, 0x01	; 1
 72c:	30 f4       	brcc	.+12     	; 0x73a <TickFct_altitude+0x6e>
 72e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
			{
				droneSignal = ((droneSignal & 0xFC) | 0x01); // Up/Down set to 01 for down
 732:	8c 7f       	andi	r24, 0xFC	; 252
 734:	81 60       	ori	r24, 0x01	; 1
 736:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 73a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <movement_state>
			}
			movement_state = up_down;
 73e:	03 c0       	rjmp	.+6      	; 0x746 <TickFct_altitude+0x7a>
			break;
 740:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <movement_state>
		default:
			movement_state = up_down;
 744:	00 00       	nop
			break;
 746:	89 81       	ldd	r24, Y+1	; 0x01
	}
	return altitude_state;
 748:	9a 81       	ldd	r25, Y+2	; 0x02
 74a:	0f 90       	pop	r0
}
 74c:	0f 90       	pop	r0
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	08 95       	ret

00000754 <TickFct_button>:
 754:	cf 93       	push	r28

enum button_states {buttons} button_state;

int TickFct_button(int button_state)
{
 756:	df 93       	push	r29
 758:	00 d0       	rcall	.+0      	; 0x75a <TickFct_button+0x6>
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
 75e:	9a 83       	std	Y+2, r25	; 0x02
 760:	89 83       	std	Y+1, r24	; 0x01
	switch(button_state)
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	9a 81       	ldd	r25, Y+2	; 0x02
 766:	89 2b       	or	r24, r25
 768:	41 f4       	brne	.+16     	; 0x77a <TickFct_button+0x26>
	{
		case buttons: // Right joystick controls up and down movements
			droneSignal = (droneSignal & 0x9F); // buttons set to 00 for unused
 76a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
 76e:	8f 79       	andi	r24, 0x9F	; 159
 770:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
			movement_state = buttons;
 774:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <movement_state>
			break;
 778:	03 c0       	rjmp	.+6      	; 0x780 <TickFct_button+0x2c>
		default:
			movement_state = buttons;
 77a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <movement_state>
			break;
 77e:	00 00       	nop
	}
	return button_state;
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	9a 81       	ldd	r25, Y+2	; 0x02
}
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <spi_master>:

// SPI
enum uart_state{wait, send};
	
int spi_master(int state)
{
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	00 d0       	rcall	.+0      	; 0x794 <spi_master+0x6>
 794:	00 d0       	rcall	.+0      	; 0x796 <spi_master+0x8>
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
 79a:	9c 83       	std	Y+4, r25	; 0x04
 79c:	8b 83       	std	Y+3, r24	; 0x03
	switch(state)
 79e:	8b 81       	ldd	r24, Y+3	; 0x03
 7a0:	9c 81       	ldd	r25, Y+4	; 0x04
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	19 f0       	breq	.+6      	; 0x7ac <spi_master+0x1e>
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	d1 f1       	breq	.+116    	; 0x81e <spi_master+0x90>
 7aa:	3f c0       	rjmp	.+126    	; 0x82a <spi_master+0x9c>
	{
		case wait:
			counter = 0; // Counts the number of bits set to 1
 7ac:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
			for(int i = 0; i < 7; i++)
 7b0:	1a 82       	std	Y+2, r1	; 0x02
 7b2:	19 82       	std	Y+1, r1	; 0x01
 7b4:	1b c0       	rjmp	.+54     	; 0x7ec <spi_master+0x5e>
			{
				temp = (droneSignal >> i) &  0x01; // Right shift by i and clear unwanted bits
 7b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
 7ba:	88 2f       	mov	r24, r24
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	09 80       	ldd	r0, Y+1	; 0x01
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <spi_master+0x38>
 7c2:	95 95       	asr	r25
 7c4:	87 95       	ror	r24
 7c6:	0a 94       	dec	r0
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <spi_master+0x34>
 7ca:	81 70       	andi	r24, 0x01	; 1
 7cc:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <temp>
				if(temp == 0x01){ counter++;} // If the bit we are checking is set to 1, update the counter
 7d0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <temp>
 7d4:	81 30       	cpi	r24, 0x01	; 1
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <spi_master+0x54>
 7d8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 7dc:	8f 5f       	subi	r24, 0xFF	; 255
 7de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter>
{
	switch(state)
	{
		case wait:
			counter = 0; // Counts the number of bits set to 1
			for(int i = 0; i < 7; i++)
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	9a 81       	ldd	r25, Y+2	; 0x02
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	9a 83       	std	Y+2, r25	; 0x02
 7ea:	89 83       	std	Y+1, r24	; 0x01
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
 7ee:	9a 81       	ldd	r25, Y+2	; 0x02
 7f0:	07 97       	sbiw	r24, 0x07	; 7
 7f2:	0c f3       	brlt	.-62     	; 0x7b6 <spi_master+0x28>
			{
				temp = (droneSignal >> i) &  0x01; // Right shift by i and clear unwanted bits
				if(temp == 0x01){ counter++;} // If the bit we are checking is set to 1, update the counter
			}
			if((counter % 2) == 0) // Checks whether or not we have an even number of bits
 7f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 7f8:	81 70       	andi	r24, 0x01	; 1
 7fa:	88 23       	and	r24, r24
 7fc:	31 f4       	brne	.+12     	; 0x80a <spi_master+0x7c>
			{
				droneSignal = droneSignal & 0x7F; // Set parity bit to 0 for even number of 1s
 7fe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
 802:	8f 77       	andi	r24, 0x7F	; 127
 804:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
 808:	05 c0       	rjmp	.+10     	; 0x814 <spi_master+0x86>
			}
			else
			{
				droneSignal = droneSignal | 0x80; // Set parity bit to 1 for odd number of 1s
 80a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
 80e:	80 68       	ori	r24, 0x80	; 128
 810:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneSignal>
			}
			state = send;
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	9c 83       	std	Y+4, r25	; 0x04
 81a:	8b 83       	std	Y+3, r24	; 0x03
			break;
 81c:	09 c0       	rjmp	.+18     	; 0x830 <spi_master+0xa2>
		case send:
			SPI_MasterTransmit(droneSignal); // Transmit droneSignal over RF using SPI protocol
 81e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <droneSignal>
 822:	36 de       	rcall	.-916    	; 0x490 <SPI_MasterTransmit>
			state = wait;
 824:	1c 82       	std	Y+4, r1	; 0x04
 826:	1b 82       	std	Y+3, r1	; 0x03
			break;
 828:	03 c0       	rjmp	.+6      	; 0x830 <spi_master+0xa2>
		default:
			state = wait;
 82a:	1c 82       	std	Y+4, r1	; 0x04
 82c:	1b 82       	std	Y+3, r1	; 0x03
			break;
 82e:	00 00       	nop
	}
	return state;
 830:	8b 81       	ldd	r24, Y+3	; 0x03
 832:	9c 81       	ldd	r25, Y+4	; 0x04
}
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <main>:


int main(void)
{
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	1f 92       	push	r1
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Input from ADC
 84c:	81 e2       	ldi	r24, 0x21	; 33
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	fc 01       	movw	r30, r24
 852:	10 82       	st	Z, r1
 854:	82 e2       	ldi	r24, 0x22	; 34
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	2f ef       	ldi	r18, 0xFF	; 255
 85a:	fc 01       	movw	r30, r24
 85c:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00; // Output for testing
 85e:	8a e2       	ldi	r24, 0x2A	; 42
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	2f ef       	ldi	r18, 0xFF	; 255
 864:	fc 01       	movw	r30, r24
 866:	20 83       	st	Z, r18
 868:	8b e2       	ldi	r24, 0x2B	; 43
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	fc 01       	movw	r30, r24
 86e:	10 82       	st	Z, r1
	//DDRC = 0x00; PORTC = 0xFF; // Input from button 2
	//DDRD = 0x00; PORTD = 0xFF; // Input from button 1 (claw)
	// Output from RF transmitter will be sent from MOSI do not initialize DDRB 

	TimerSet(timerPeriod);
 870:	61 e0       	ldi	r22, 0x01	; 1
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	83 dd       	rcall	.-1274   	; 0x380 <TimerSet>
	TimerOn();
 87a:	b0 dd       	rcall	.-1184   	; 0x3dc <TimerOn>
	A2D_init();
 87c:	88 de       	rcall	.-752    	; 0x58e <A2D_init>
 87e:	e5 dd       	rcall	.-1078   	; 0x44a <SPI_MasterInit>
	SPI_MasterInit();
 880:	19 82       	std	Y+1, r1	; 0x01
 882:	89 81       	ldd	r24, Y+1	; 0x01

	unsigned char i = 0;
 884:	28 2f       	mov	r18, r24
	tasks[i].state = -1;
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	4b e0       	ldi	r20, 0x0B	; 11
 88a:	42 9f       	mul	r20, r18
 88c:	c0 01       	movw	r24, r0
 88e:	43 9f       	mul	r20, r19
 890:	90 0d       	add	r25, r0
 892:	11 24       	eor	r1, r1
 894:	8e 5e       	subi	r24, 0xEE	; 238
 896:	9e 4f       	sbci	r25, 0xFE	; 254
 898:	2f ef       	ldi	r18, 0xFF	; 255
 89a:	fc 01       	movw	r30, r24
 89c:	20 83       	st	Z, r18
 89e:	89 81       	ldd	r24, Y+1	; 0x01
 8a0:	28 2f       	mov	r18, r24
	tasks[i].period = 50;
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	4b e0       	ldi	r20, 0x0B	; 11
 8a6:	42 9f       	mul	r20, r18
 8a8:	c0 01       	movw	r24, r0
 8aa:	43 9f       	mul	r20, r19
 8ac:	90 0d       	add	r25, r0
 8ae:	11 24       	eor	r1, r1
 8b0:	9c 01       	movw	r18, r24
 8b2:	2d 5e       	subi	r18, 0xED	; 237
 8b4:	3e 4f       	sbci	r19, 0xFE	; 254
 8b6:	82 e3       	ldi	r24, 0x32	; 50
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	a0 e0       	ldi	r26, 0x00	; 0
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	f9 01       	movw	r30, r18
 8c0:	80 83       	st	Z, r24
 8c2:	91 83       	std	Z+1, r25	; 0x01
 8c4:	a2 83       	std	Z+2, r26	; 0x02
 8c6:	b3 83       	std	Z+3, r27	; 0x03
 8c8:	89 81       	ldd	r24, Y+1	; 0x01
 8ca:	28 2f       	mov	r18, r24
	tasks[i].elapsedTime = 0;
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	4b e0       	ldi	r20, 0x0B	; 11
 8d0:	42 9f       	mul	r20, r18
 8d2:	c0 01       	movw	r24, r0
 8d4:	43 9f       	mul	r20, r19
 8d6:	90 0d       	add	r25, r0
 8d8:	11 24       	eor	r1, r1
 8da:	89 5e       	subi	r24, 0xE9	; 233
 8dc:	9e 4f       	sbci	r25, 0xFE	; 254
 8de:	fc 01       	movw	r30, r24
 8e0:	10 82       	st	Z, r1
 8e2:	11 82       	std	Z+1, r1	; 0x01
 8e4:	12 82       	std	Z+2, r1	; 0x02
 8e6:	13 82       	std	Z+3, r1	; 0x03
 8e8:	89 81       	ldd	r24, Y+1	; 0x01
 8ea:	28 2f       	mov	r18, r24
	tasks[i].TickFct = &TickFct_movement;
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	4b e0       	ldi	r20, 0x0B	; 11
 8f0:	42 9f       	mul	r20, r18
 8f2:	c0 01       	movw	r24, r0
 8f4:	43 9f       	mul	r20, r19
 8f6:	90 0d       	add	r25, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	85 5e       	subi	r24, 0xE5	; 229
 8fc:	9e 4f       	sbci	r25, 0xFE	; 254
 8fe:	24 ef       	ldi	r18, 0xF4	; 244
 900:	32 e0       	ldi	r19, 0x02	; 2
 902:	fc 01       	movw	r30, r24
 904:	31 83       	std	Z+1, r19	; 0x01
 906:	20 83       	st	Z, r18
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	8f 5f       	subi	r24, 0xFF	; 255
	i++;
 90c:	89 83       	std	Y+1, r24	; 0x01
 90e:	89 81       	ldd	r24, Y+1	; 0x01
 910:	28 2f       	mov	r18, r24
	tasks[i].state = -1;
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	4b e0       	ldi	r20, 0x0B	; 11
 916:	42 9f       	mul	r20, r18
 918:	c0 01       	movw	r24, r0
 91a:	43 9f       	mul	r20, r19
 91c:	90 0d       	add	r25, r0
 91e:	11 24       	eor	r1, r1
 920:	8e 5e       	subi	r24, 0xEE	; 238
 922:	9e 4f       	sbci	r25, 0xFE	; 254
 924:	2f ef       	ldi	r18, 0xFF	; 255
 926:	fc 01       	movw	r30, r24
 928:	20 83       	st	Z, r18
 92a:	89 81       	ldd	r24, Y+1	; 0x01
 92c:	28 2f       	mov	r18, r24
	tasks[i].period = 50;
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	4b e0       	ldi	r20, 0x0B	; 11
 932:	42 9f       	mul	r20, r18
 934:	c0 01       	movw	r24, r0
 936:	43 9f       	mul	r20, r19
 938:	90 0d       	add	r25, r0
 93a:	11 24       	eor	r1, r1
 93c:	9c 01       	movw	r18, r24
 93e:	2d 5e       	subi	r18, 0xED	; 237
 940:	3e 4f       	sbci	r19, 0xFE	; 254
 942:	82 e3       	ldi	r24, 0x32	; 50
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	a0 e0       	ldi	r26, 0x00	; 0
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	f9 01       	movw	r30, r18
 94c:	80 83       	st	Z, r24
 94e:	91 83       	std	Z+1, r25	; 0x01
 950:	a2 83       	std	Z+2, r26	; 0x02
 952:	b3 83       	std	Z+3, r27	; 0x03
 954:	89 81       	ldd	r24, Y+1	; 0x01
 956:	28 2f       	mov	r18, r24
	tasks[i].elapsedTime = 0;
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	4b e0       	ldi	r20, 0x0B	; 11
 95c:	42 9f       	mul	r20, r18
 95e:	c0 01       	movw	r24, r0
 960:	43 9f       	mul	r20, r19
 962:	90 0d       	add	r25, r0
 964:	11 24       	eor	r1, r1
 966:	89 5e       	subi	r24, 0xE9	; 233
 968:	9e 4f       	sbci	r25, 0xFE	; 254
 96a:	fc 01       	movw	r30, r24
 96c:	10 82       	st	Z, r1
 96e:	11 82       	std	Z+1, r1	; 0x01
 970:	12 82       	std	Z+2, r1	; 0x02
 972:	13 82       	std	Z+3, r1	; 0x03
 974:	89 81       	ldd	r24, Y+1	; 0x01
 976:	28 2f       	mov	r18, r24
	tasks[i].TickFct = &TickFct_altitude;
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	4b e0       	ldi	r20, 0x0B	; 11
 97c:	42 9f       	mul	r20, r18
 97e:	c0 01       	movw	r24, r0
 980:	43 9f       	mul	r20, r19
 982:	90 0d       	add	r25, r0
 984:	11 24       	eor	r1, r1
 986:	85 5e       	subi	r24, 0xE5	; 229
 988:	9e 4f       	sbci	r25, 0xFE	; 254
 98a:	26 e6       	ldi	r18, 0x66	; 102
 98c:	33 e0       	ldi	r19, 0x03	; 3
 98e:	fc 01       	movw	r30, r24
 990:	31 83       	std	Z+1, r19	; 0x01
 992:	20 83       	st	Z, r18
 994:	89 81       	ldd	r24, Y+1	; 0x01
 996:	8f 5f       	subi	r24, 0xFF	; 255
	i++;
 998:	89 83       	std	Y+1, r24	; 0x01
 99a:	89 81       	ldd	r24, Y+1	; 0x01
 99c:	28 2f       	mov	r18, r24
	tasks[i].state = -1;
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	4b e0       	ldi	r20, 0x0B	; 11
 9a2:	42 9f       	mul	r20, r18
 9a4:	c0 01       	movw	r24, r0
 9a6:	43 9f       	mul	r20, r19
 9a8:	90 0d       	add	r25, r0
 9aa:	11 24       	eor	r1, r1
 9ac:	8e 5e       	subi	r24, 0xEE	; 238
 9ae:	9e 4f       	sbci	r25, 0xFE	; 254
 9b0:	2f ef       	ldi	r18, 0xFF	; 255
 9b2:	fc 01       	movw	r30, r24
 9b4:	20 83       	st	Z, r18
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	28 2f       	mov	r18, r24
	tasks[i].period = 50;
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	4b e0       	ldi	r20, 0x0B	; 11
 9be:	42 9f       	mul	r20, r18
 9c0:	c0 01       	movw	r24, r0
 9c2:	43 9f       	mul	r20, r19
 9c4:	90 0d       	add	r25, r0
 9c6:	11 24       	eor	r1, r1
 9c8:	9c 01       	movw	r18, r24
 9ca:	2d 5e       	subi	r18, 0xED	; 237
 9cc:	3e 4f       	sbci	r19, 0xFE	; 254
 9ce:	82 e3       	ldi	r24, 0x32	; 50
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	a0 e0       	ldi	r26, 0x00	; 0
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	f9 01       	movw	r30, r18
 9d8:	80 83       	st	Z, r24
 9da:	91 83       	std	Z+1, r25	; 0x01
 9dc:	a2 83       	std	Z+2, r26	; 0x02
 9de:	b3 83       	std	Z+3, r27	; 0x03
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	28 2f       	mov	r18, r24
	tasks[i].elapsedTime = 0;
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	4b e0       	ldi	r20, 0x0B	; 11
 9e8:	42 9f       	mul	r20, r18
 9ea:	c0 01       	movw	r24, r0
 9ec:	43 9f       	mul	r20, r19
 9ee:	90 0d       	add	r25, r0
 9f0:	11 24       	eor	r1, r1
 9f2:	89 5e       	subi	r24, 0xE9	; 233
 9f4:	9e 4f       	sbci	r25, 0xFE	; 254
 9f6:	fc 01       	movw	r30, r24
 9f8:	10 82       	st	Z, r1
 9fa:	11 82       	std	Z+1, r1	; 0x01
 9fc:	12 82       	std	Z+2, r1	; 0x02
 9fe:	13 82       	std	Z+3, r1	; 0x03
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	28 2f       	mov	r18, r24
	tasks[i].TickFct = &TickFct_button;
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	4b e0       	ldi	r20, 0x0B	; 11
 a08:	42 9f       	mul	r20, r18
 a0a:	c0 01       	movw	r24, r0
 a0c:	43 9f       	mul	r20, r19
 a0e:	90 0d       	add	r25, r0
 a10:	11 24       	eor	r1, r1
 a12:	85 5e       	subi	r24, 0xE5	; 229
 a14:	9e 4f       	sbci	r25, 0xFE	; 254
 a16:	2a ea       	ldi	r18, 0xAA	; 170
 a18:	33 e0       	ldi	r19, 0x03	; 3
 a1a:	fc 01       	movw	r30, r24
 a1c:	31 83       	std	Z+1, r19	; 0x01
 a1e:	20 83       	st	Z, r18
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	8f 5f       	subi	r24, 0xFF	; 255
	i++;
 a24:	89 83       	std	Y+1, r24	; 0x01
 a26:	89 81       	ldd	r24, Y+1	; 0x01
 a28:	28 2f       	mov	r18, r24
	tasks[i].state = -1;
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	4b e0       	ldi	r20, 0x0B	; 11
 a2e:	42 9f       	mul	r20, r18
 a30:	c0 01       	movw	r24, r0
 a32:	43 9f       	mul	r20, r19
 a34:	90 0d       	add	r25, r0
 a36:	11 24       	eor	r1, r1
 a38:	8e 5e       	subi	r24, 0xEE	; 238
 a3a:	9e 4f       	sbci	r25, 0xFE	; 254
 a3c:	2f ef       	ldi	r18, 0xFF	; 255
 a3e:	fc 01       	movw	r30, r24
 a40:	20 83       	st	Z, r18
 a42:	89 81       	ldd	r24, Y+1	; 0x01
 a44:	28 2f       	mov	r18, r24
	tasks[i].period = 25;
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	4b e0       	ldi	r20, 0x0B	; 11
 a4a:	42 9f       	mul	r20, r18
 a4c:	c0 01       	movw	r24, r0
 a4e:	43 9f       	mul	r20, r19
 a50:	90 0d       	add	r25, r0
 a52:	11 24       	eor	r1, r1
 a54:	9c 01       	movw	r18, r24
 a56:	2d 5e       	subi	r18, 0xED	; 237
 a58:	3e 4f       	sbci	r19, 0xFE	; 254
 a5a:	89 e1       	ldi	r24, 0x19	; 25
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	a0 e0       	ldi	r26, 0x00	; 0
 a60:	b0 e0       	ldi	r27, 0x00	; 0
 a62:	f9 01       	movw	r30, r18
 a64:	80 83       	st	Z, r24
 a66:	91 83       	std	Z+1, r25	; 0x01
 a68:	a2 83       	std	Z+2, r26	; 0x02
 a6a:	b3 83       	std	Z+3, r27	; 0x03
 a6c:	89 81       	ldd	r24, Y+1	; 0x01
 a6e:	28 2f       	mov	r18, r24
	tasks[i].elapsedTime = 0;
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	4b e0       	ldi	r20, 0x0B	; 11
 a74:	42 9f       	mul	r20, r18
 a76:	c0 01       	movw	r24, r0
 a78:	43 9f       	mul	r20, r19
 a7a:	90 0d       	add	r25, r0
 a7c:	11 24       	eor	r1, r1
 a7e:	89 5e       	subi	r24, 0xE9	; 233
 a80:	9e 4f       	sbci	r25, 0xFE	; 254
 a82:	fc 01       	movw	r30, r24
 a84:	10 82       	st	Z, r1
 a86:	11 82       	std	Z+1, r1	; 0x01
 a88:	12 82       	std	Z+2, r1	; 0x02
 a8a:	13 82       	std	Z+3, r1	; 0x03
 a8c:	89 81       	ldd	r24, Y+1	; 0x01
 a8e:	28 2f       	mov	r18, r24
	tasks[i].TickFct = &spi_master;
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	4b e0       	ldi	r20, 0x0B	; 11
 a94:	42 9f       	mul	r20, r18
 a96:	c0 01       	movw	r24, r0
 a98:	43 9f       	mul	r20, r19
 a9a:	90 0d       	add	r25, r0
 a9c:	11 24       	eor	r1, r1
 a9e:	85 5e       	subi	r24, 0xE5	; 229
 aa0:	9e 4f       	sbci	r25, 0xFE	; 254
 aa2:	27 ec       	ldi	r18, 0xC7	; 199
 aa4:	33 e0       	ldi	r19, 0x03	; 3
 aa6:	fc 01       	movw	r30, r24
 aa8:	31 83       	std	Z+1, r19	; 0x01
 aaa:	20 83       	st	Z, r18
 aac:	8b e2       	ldi	r24, 0x2B	; 43
 aae:	90 e0       	ldi	r25, 0x00	; 0

	while (1)
	{
		PORTD = droneSignal; // Test that we are generating the correct signal DELETE ONCE DONE
 ab0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <droneSignal>
 ab4:	fc 01       	movw	r30, r24
 ab6:	20 83       	st	Z, r18
 ab8:	f9 cf       	rjmp	.-14     	; 0xaac <main+0x26a>

00000aba <_exit>:
 aba:	f8 94       	cli

00000abc <__stop_program>:
	}
 abc:	ff cf       	rjmp	.-2      	; 0xabc <__stop_program>
