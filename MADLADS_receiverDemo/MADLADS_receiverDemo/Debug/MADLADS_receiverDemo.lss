
MADLADS_receiverDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000d5a  00000dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800106  00800106  00000df4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a9  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000963  00000000  00000000  00001ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cb4  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000719  00000000  00000000  000039d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000838  00000000  00000000  000040ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	71 c1       	rjmp	.+738    	; 0x2ec <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fa c0       	rjmp	.+500    	; 0x22a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e5       	ldi	r30, 0x5A	; 90
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 33       	cpi	r26, 0x3C	; 60
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5b d5       	rcall	.+2742   	; 0xb7a <main>
  c4:	48 c6       	rjmp	.+3216   	; 0xd56 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
    default: {
      return(radioInit);
      break;
    }
  }
}
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <i.1615>
  d8:	9d c0       	rjmp	.+314    	; 0x214 <TimerISR+0x14c>
  da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	4b e0       	ldi	r20, 0x0B	; 11
  e4:	42 9f       	mul	r20, r18
  e6:	c0 01       	movw	r24, r0
  e8:	43 9f       	mul	r20, r19
  ea:	90 0d       	add	r25, r0
  ec:	11 24       	eor	r1, r1
  ee:	86 5e       	subi	r24, 0xE6	; 230
  f0:	9e 4f       	sbci	r25, 0xFE	; 254
  f2:	fc 01       	movw	r30, r24
  f4:	20 81       	ld	r18, Z
  f6:	31 81       	ldd	r19, Z+1	; 0x01
  f8:	42 81       	ldd	r20, Z+2	; 0x02
  fa:	53 81       	ldd	r21, Z+3	; 0x03
  fc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 100:	68 2f       	mov	r22, r24
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	eb e0       	ldi	r30, 0x0B	; 11
 106:	e6 9f       	mul	r30, r22
 108:	c0 01       	movw	r24, r0
 10a:	e7 9f       	mul	r30, r23
 10c:	90 0d       	add	r25, r0
 10e:	11 24       	eor	r1, r1
 110:	8a 5e       	subi	r24, 0xEA	; 234
 112:	9e 4f       	sbci	r25, 0xFE	; 254
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	a2 81       	ldd	r26, Z+2	; 0x02
 11c:	b3 81       	ldd	r27, Z+3	; 0x03
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	4a 07       	cpc	r20, r26
 124:	5b 07       	cpc	r21, r27
 126:	08 f4       	brcc	.+2      	; 0x12a <TimerISR+0x62>
 128:	42 c0       	rjmp	.+132    	; 0x1ae <TimerISR+0xe6>
 12a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 12e:	08 2f       	mov	r16, r24
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	4b e0       	ldi	r20, 0x0B	; 11
 13c:	42 9f       	mul	r20, r18
 13e:	c0 01       	movw	r24, r0
 140:	43 9f       	mul	r20, r19
 142:	90 0d       	add	r25, r0
 144:	11 24       	eor	r1, r1
 146:	82 5e       	subi	r24, 0xE2	; 226
 148:	9e 4f       	sbci	r25, 0xFE	; 254
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	31 81       	ldd	r19, Z+1	; 0x01
 150:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 154:	48 2f       	mov	r20, r24
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	6b e0       	ldi	r22, 0x0B	; 11
 15a:	64 9f       	mul	r22, r20
 15c:	c0 01       	movw	r24, r0
 15e:	65 9f       	mul	r22, r21
 160:	90 0d       	add	r25, r0
 162:	11 24       	eor	r1, r1
 164:	8b 5e       	subi	r24, 0xEB	; 235
 166:	9e 4f       	sbci	r25, 0xFE	; 254
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	08 2e       	mov	r0, r24
 16e:	00 0c       	add	r0, r0
 170:	99 0b       	sbc	r25, r25
 172:	f9 01       	movw	r30, r18
 174:	09 95       	icall
 176:	38 2f       	mov	r19, r24
 178:	2b e0       	ldi	r18, 0x0B	; 11
 17a:	20 9f       	mul	r18, r16
 17c:	c0 01       	movw	r24, r0
 17e:	21 9f       	mul	r18, r17
 180:	90 0d       	add	r25, r0
 182:	11 24       	eor	r1, r1
 184:	8b 5e       	subi	r24, 0xEB	; 235
 186:	9e 4f       	sbci	r25, 0xFE	; 254
 188:	fc 01       	movw	r30, r24
 18a:	30 83       	st	Z, r19
 18c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4b e0       	ldi	r20, 0x0B	; 11
 196:	42 9f       	mul	r20, r18
 198:	c0 01       	movw	r24, r0
 19a:	43 9f       	mul	r20, r19
 19c:	90 0d       	add	r25, r0
 19e:	11 24       	eor	r1, r1
 1a0:	86 5e       	subi	r24, 0xE6	; 230
 1a2:	9e 4f       	sbci	r25, 0xFE	; 254
 1a4:	fc 01       	movw	r30, r24
 1a6:	10 82       	st	Z, r1
 1a8:	11 82       	std	Z+1, r1	; 0x01
 1aa:	12 82       	std	Z+2, r1	; 0x02
 1ac:	13 82       	std	Z+3, r1	; 0x03
 1ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 1b2:	68 2f       	mov	r22, r24
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	4b e0       	ldi	r20, 0x0B	; 11
 1c0:	42 9f       	mul	r20, r18
 1c2:	c0 01       	movw	r24, r0
 1c4:	43 9f       	mul	r20, r19
 1c6:	90 0d       	add	r25, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	86 5e       	subi	r24, 0xE6	; 230
 1cc:	9e 4f       	sbci	r25, 0xFE	; 254
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 81       	ld	r18, Z
 1d2:	31 81       	ldd	r19, Z+1	; 0x01
 1d4:	42 81       	ldd	r20, Z+2	; 0x02
 1d6:	53 81       	ldd	r21, Z+3	; 0x03
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	a4 1f       	adc	r26, r20
 1ee:	b5 1f       	adc	r27, r21
 1f0:	4b e0       	ldi	r20, 0x0B	; 11
 1f2:	46 9f       	mul	r20, r22
 1f4:	90 01       	movw	r18, r0
 1f6:	47 9f       	mul	r20, r23
 1f8:	30 0d       	add	r19, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	26 5e       	subi	r18, 0xE6	; 230
 1fe:	3e 4f       	sbci	r19, 0xFE	; 254
 200:	f9 01       	movw	r30, r18
 202:	80 83       	st	Z, r24
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	a2 83       	std	Z+2, r26	; 0x02
 208:	b3 83       	std	Z+3, r27	; 0x03
 20a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <i.1615>
 214:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1615>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	08 f4       	brcc	.+2      	; 0x21e <TimerISR+0x156>
 21c:	5e cf       	rjmp	.-324    	; 0xda <TimerISR+0x12>
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <__vector_13>:
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 23a:	0f 92       	push	r0
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 260:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 264:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
 268:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	a1 09       	sbc	r26, r1
 270:	b1 09       	sbc	r27, r1
 272:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 276:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 27a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 27e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 282:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 286:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 28a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
 28e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
 292:	89 2b       	or	r24, r25
 294:	8a 2b       	or	r24, r26
 296:	8b 2b       	or	r24, r27
 298:	89 f4       	brne	.+34     	; 0x2bc <__vector_13+0x92>
 29a:	16 df       	rcall	.-468    	; 0xc8 <TimerISR>
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2a4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2a8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2b0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 2b4:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 2b8:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 2bc:	00 00       	nop
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2e0:	0f 90       	pop	r0
 2e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_2>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2fc:	0f 92       	push	r0
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sonar_flag>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	a9 f4       	brne	.+42     	; 0x344 <__vector_2+0x58>
 31a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sonar_flag>
 31e:	81 e9       	ldi	r24, 0x91	; 145
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	10 82       	st	Z, r1
 326:	84 e9       	ldi	r24, 0x94	; 148
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	91 81       	ldd	r25, Z+1	; 0x01
 330:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <sonar+0x1>
 334:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sonar>
 338:	84 e9       	ldi	r24, 0x94	; 148
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	fc 01       	movw	r30, r24
 33e:	11 82       	std	Z+1, r1	; 0x01
 340:	10 82       	st	Z, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <__vector_2+0x70>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sonar_flag>
 34a:	81 e9       	ldi	r24, 0x91	; 145
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	21 e9       	ldi	r18, 0x91	; 145
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	22 60       	ori	r18, 0x02	; 2
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
 35c:	00 00       	nop
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 374:	0f 90       	pop	r0
 376:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <TimerSet>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <TimerSet+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <TimerSet+0x8>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	69 83       	std	Y+1, r22	; 0x01
 38e:	7a 83       	std	Y+2, r23	; 0x02
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	9c 83       	std	Y+4, r25	; 0x04
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	ab 81       	ldd	r26, Y+3	; 0x03
 39a:	bc 81       	ldd	r27, Y+4	; 0x04
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 3c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 3c4:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 3c8:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 3cc:	00 00       	nop
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <TimerOn>:
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	81 e8       	ldi	r24, 0x81	; 129
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2b e0       	ldi	r18, 0x0B	; 11
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	88 e8       	ldi	r24, 0x88	; 136
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2d e7       	ldi	r18, 0x7D	; 125
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	fc 01       	movw	r30, r24
 3f8:	31 83       	std	Z+1, r19	; 0x01
 3fa:	20 83       	st	Z, r18
 3fc:	8f e6       	ldi	r24, 0x6F	; 111
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	22 e0       	ldi	r18, 0x02	; 2
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
 406:	84 e8       	ldi	r24, 0x84	; 132
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	fc 01       	movw	r30, r24
 40c:	11 82       	std	Z+1, r1	; 0x01
 40e:	10 82       	st	Z, r1
 410:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 414:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 418:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 41c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 420:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 424:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 428:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 42c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 430:	8f e5       	ldi	r24, 0x5F	; 95
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	2f e5       	ldi	r18, 0x5F	; 95
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	20 68       	ori	r18, 0x80	; 128
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
 442:	00 00       	nop
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <delay_ms>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <delay_ms+0x6>
 450:	00 d0       	rcall	.+0      	; 0x452 <delay_ms+0x8>
 452:	00 d0       	rcall	.+0      	; 0x454 <delay_ms+0xa>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	9e 83       	std	Y+6, r25	; 0x06
 45a:	8d 83       	std	Y+5, r24	; 0x05
 45c:	1a 82       	std	Y+2, r1	; 0x02
 45e:	19 82       	std	Y+1, r1	; 0x01
 460:	13 c0       	rjmp	.+38     	; 0x488 <delay_ms+0x3e>
 462:	1c 82       	std	Y+4, r1	; 0x04
 464:	1b 82       	std	Y+3, r1	; 0x03
 466:	06 c0       	rjmp	.+12     	; 0x474 <delay_ms+0x2a>
 468:	00 00       	nop
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	9c 83       	std	Y+4, r25	; 0x04
 472:	8b 83       	std	Y+3, r24	; 0x03
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	9c 81       	ldd	r25, Y+4	; 0x04
 478:	87 30       	cpi	r24, 0x07	; 7
 47a:	93 40       	sbci	r25, 0x03	; 3
 47c:	ac f3       	brlt	.-22     	; 0x468 <delay_ms+0x1e>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	89 83       	std	Y+1, r24	; 0x01
 488:	29 81       	ldd	r18, Y+1	; 0x01
 48a:	3a 81       	ldd	r19, Y+2	; 0x02
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	9e 81       	ldd	r25, Y+6	; 0x06
 490:	28 17       	cp	r18, r24
 492:	39 07       	cpc	r19, r25
 494:	34 f3       	brlt	.-52     	; 0x462 <delay_ms+0x18>
 496:	00 00       	nop
 498:	26 96       	adiw	r28, 0x06	; 6
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <SPI_MasterInit>:
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	84 e2       	ldi	r24, 0x24	; 36
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	20 eb       	ldi	r18, 0xB0	; 176
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
 4bc:	8c e4       	ldi	r24, 0x4C	; 76
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	2c e4       	ldi	r18, 0x4C	; 76
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	f9 01       	movw	r30, r18
 4c6:	20 81       	ld	r18, Z
 4c8:	21 65       	ori	r18, 0x51	; 81
 4ca:	fc 01       	movw	r30, r24
 4cc:	20 83       	st	Z, r18
 4ce:	8f e5       	ldi	r24, 0x5F	; 95
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	2f e5       	ldi	r18, 0x5F	; 95
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	f9 01       	movw	r30, r18
 4d8:	20 81       	ld	r18, Z
 4da:	20 68       	ori	r18, 0x80	; 128
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
 4e0:	00 00       	nop
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <writeRegister>:
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <writeRegister+0x6>
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <writeRegister+0x8>
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <writeRegister+0xa>
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
 4f6:	8b 83       	std	Y+3, r24	; 0x03
 4f8:	7d 83       	std	Y+5, r23	; 0x05
 4fa:	6c 83       	std	Y+4, r22	; 0x04
 4fc:	4e 83       	std	Y+6, r20	; 0x06
 4fe:	85 e2       	ldi	r24, 0x25	; 37
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	25 e2       	ldi	r18, 0x25	; 37
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	f9 01       	movw	r30, r18
 508:	20 81       	ld	r18, Z
 50a:	2e 7f       	andi	r18, 0xFE	; 254
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
 510:	8e e4       	ldi	r24, 0x4E	; 78
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	2b 81       	ldd	r18, Y+3	; 0x03
 516:	2f 71       	andi	r18, 0x1F	; 31
 518:	20 62       	ori	r18, 0x20	; 32
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
 51e:	00 00       	nop
 520:	8d e4       	ldi	r24, 0x4D	; 77
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	fc 01       	movw	r30, r24
 526:	80 81       	ld	r24, Z
 528:	88 23       	and	r24, r24
 52a:	d4 f7       	brge	.-12     	; 0x520 <writeRegister+0x38>
 52c:	8e e4       	ldi	r24, 0x4E	; 78
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	fc 01       	movw	r30, r24
 532:	80 81       	ld	r24, Z
 534:	8a 83       	std	Y+2, r24	; 0x02
 536:	19 82       	std	Y+1, r1	; 0x01
 538:	17 c0       	rjmp	.+46     	; 0x568 <writeRegister+0x80>
 53a:	8e e4       	ldi	r24, 0x4E	; 78
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	29 81       	ldd	r18, Y+1	; 0x01
 540:	22 2f       	mov	r18, r18
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	4c 81       	ldd	r20, Y+4	; 0x04
 546:	5d 81       	ldd	r21, Y+5	; 0x05
 548:	24 0f       	add	r18, r20
 54a:	35 1f       	adc	r19, r21
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
 554:	00 00       	nop
 556:	8d e4       	ldi	r24, 0x4D	; 77
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	fc 01       	movw	r30, r24
 55c:	80 81       	ld	r24, Z
 55e:	88 23       	and	r24, r24
 560:	d4 f7       	brge	.-12     	; 0x556 <writeRegister+0x6e>
 562:	89 81       	ldd	r24, Y+1	; 0x01
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	89 83       	std	Y+1, r24	; 0x01
 568:	99 81       	ldd	r25, Y+1	; 0x01
 56a:	8e 81       	ldd	r24, Y+6	; 0x06
 56c:	98 17       	cp	r25, r24
 56e:	28 f3       	brcs	.-54     	; 0x53a <writeRegister+0x52>
 570:	85 e2       	ldi	r24, 0x25	; 37
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	25 e2       	ldi	r18, 0x25	; 37
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	f9 01       	movw	r30, r18
 57a:	20 81       	ld	r18, Z
 57c:	21 60       	ori	r18, 0x01	; 1
 57e:	fc 01       	movw	r30, r24
 580:	20 83       	st	Z, r18
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	26 96       	adiw	r28, 0x06	; 6
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <readRegister>:
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	00 d0       	rcall	.+0      	; 0x59c <readRegister+0x6>
 59c:	00 d0       	rcall	.+0      	; 0x59e <readRegister+0x8>
 59e:	00 d0       	rcall	.+0      	; 0x5a0 <readRegister+0xa>
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
 5a4:	8b 83       	std	Y+3, r24	; 0x03
 5a6:	7d 83       	std	Y+5, r23	; 0x05
 5a8:	6c 83       	std	Y+4, r22	; 0x04
 5aa:	4e 83       	std	Y+6, r20	; 0x06
 5ac:	85 e2       	ldi	r24, 0x25	; 37
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	25 e2       	ldi	r18, 0x25	; 37
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	2e 7f       	andi	r18, 0xFE	; 254
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
 5be:	8e e4       	ldi	r24, 0x4E	; 78
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	2b 81       	ldd	r18, Y+3	; 0x03
 5c4:	2f 71       	andi	r18, 0x1F	; 31
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
 5ca:	00 00       	nop
 5cc:	8d e4       	ldi	r24, 0x4D	; 77
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	88 23       	and	r24, r24
 5d6:	d4 f7       	brge	.-12     	; 0x5cc <readRegister+0x36>
 5d8:	8e e4       	ldi	r24, 0x4E	; 78
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	fc 01       	movw	r30, r24
 5de:	80 81       	ld	r24, Z
 5e0:	8a 83       	std	Y+2, r24	; 0x02
 5e2:	19 82       	std	Y+1, r1	; 0x01
 5e4:	24 c0       	rjmp	.+72     	; 0x62e <readRegister+0x98>
 5e6:	8e e4       	ldi	r24, 0x4E	; 78
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	29 81       	ldd	r18, Y+1	; 0x01
 5ec:	22 2f       	mov	r18, r18
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	4c 81       	ldd	r20, Y+4	; 0x04
 5f2:	5d 81       	ldd	r21, Y+5	; 0x05
 5f4:	24 0f       	add	r18, r20
 5f6:	35 1f       	adc	r19, r21
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	fc 01       	movw	r30, r24
 5fe:	20 83       	st	Z, r18
 600:	00 00       	nop
 602:	8d e4       	ldi	r24, 0x4D	; 77
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	fc 01       	movw	r30, r24
 608:	80 81       	ld	r24, Z
 60a:	88 23       	and	r24, r24
 60c:	d4 f7       	brge	.-12     	; 0x602 <readRegister+0x6c>
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	88 2f       	mov	r24, r24
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	2c 81       	ldd	r18, Y+4	; 0x04
 616:	3d 81       	ldd	r19, Y+5	; 0x05
 618:	82 0f       	add	r24, r18
 61a:	93 1f       	adc	r25, r19
 61c:	2e e4       	ldi	r18, 0x4E	; 78
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	f9 01       	movw	r30, r18
 622:	20 81       	ld	r18, Z
 624:	fc 01       	movw	r30, r24
 626:	20 83       	st	Z, r18
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	8f 5f       	subi	r24, 0xFF	; 255
 62c:	89 83       	std	Y+1, r24	; 0x01
 62e:	99 81       	ldd	r25, Y+1	; 0x01
 630:	8e 81       	ldd	r24, Y+6	; 0x06
 632:	98 17       	cp	r25, r24
 634:	c0 f2       	brcs	.-80     	; 0x5e6 <readRegister+0x50>
 636:	85 e2       	ldi	r24, 0x25	; 37
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	25 e2       	ldi	r18, 0x25	; 37
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	f9 01       	movw	r30, r18
 640:	20 81       	ld	r18, Z
 642:	21 60       	ori	r18, 0x01	; 1
 644:	fc 01       	movw	r30, r24
 646:	20 83       	st	Z, r18
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	26 96       	adiw	r28, 0x06	; 6
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <readPayloadRx>:
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	00 d0       	rcall	.+0      	; 0x662 <readPayloadRx+0x6>
 662:	00 d0       	rcall	.+0      	; 0x664 <readPayloadRx+0x8>
 664:	1f 92       	push	r1
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	9c 83       	std	Y+4, r25	; 0x04
 66c:	8b 83       	std	Y+3, r24	; 0x03
 66e:	6d 83       	std	Y+5, r22	; 0x05
 670:	85 e2       	ldi	r24, 0x25	; 37
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	25 e2       	ldi	r18, 0x25	; 37
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	f9 01       	movw	r30, r18
 67a:	20 81       	ld	r18, Z
 67c:	2e 7f       	andi	r18, 0xFE	; 254
 67e:	fc 01       	movw	r30, r24
 680:	20 83       	st	Z, r18
 682:	8e e4       	ldi	r24, 0x4E	; 78
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	21 e6       	ldi	r18, 0x61	; 97
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
 68c:	00 00       	nop
 68e:	8d e4       	ldi	r24, 0x4D	; 77
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	fc 01       	movw	r30, r24
 694:	80 81       	ld	r24, Z
 696:	88 23       	and	r24, r24
 698:	d4 f7       	brge	.-12     	; 0x68e <readPayloadRx+0x32>
 69a:	8e e4       	ldi	r24, 0x4E	; 78
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	fc 01       	movw	r30, r24
 6a0:	80 81       	ld	r24, Z
 6a2:	8a 83       	std	Y+2, r24	; 0x02
 6a4:	19 82       	std	Y+1, r1	; 0x01
 6a6:	24 c0       	rjmp	.+72     	; 0x6f0 <readPayloadRx+0x94>
 6a8:	8e e4       	ldi	r24, 0x4E	; 78
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	29 81       	ldd	r18, Y+1	; 0x01
 6ae:	22 2f       	mov	r18, r18
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	4b 81       	ldd	r20, Y+3	; 0x03
 6b4:	5c 81       	ldd	r21, Y+4	; 0x04
 6b6:	24 0f       	add	r18, r20
 6b8:	35 1f       	adc	r19, r21
 6ba:	f9 01       	movw	r30, r18
 6bc:	20 81       	ld	r18, Z
 6be:	fc 01       	movw	r30, r24
 6c0:	20 83       	st	Z, r18
 6c2:	00 00       	nop
 6c4:	8d e4       	ldi	r24, 0x4D	; 77
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	fc 01       	movw	r30, r24
 6ca:	80 81       	ld	r24, Z
 6cc:	88 23       	and	r24, r24
 6ce:	d4 f7       	brge	.-12     	; 0x6c4 <readPayloadRx+0x68>
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	2b 81       	ldd	r18, Y+3	; 0x03
 6d8:	3c 81       	ldd	r19, Y+4	; 0x04
 6da:	82 0f       	add	r24, r18
 6dc:	93 1f       	adc	r25, r19
 6de:	2e e4       	ldi	r18, 0x4E	; 78
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	f9 01       	movw	r30, r18
 6e4:	20 81       	ld	r18, Z
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	89 83       	std	Y+1, r24	; 0x01
 6f0:	99 81       	ldd	r25, Y+1	; 0x01
 6f2:	8d 81       	ldd	r24, Y+5	; 0x05
 6f4:	98 17       	cp	r25, r24
 6f6:	c0 f2       	brcs	.-80     	; 0x6a8 <readPayloadRx+0x4c>
 6f8:	85 e2       	ldi	r24, 0x25	; 37
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	25 e2       	ldi	r18, 0x25	; 37
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	f9 01       	movw	r30, r18
 702:	20 81       	ld	r18, Z
 704:	21 60       	ori	r18, 0x01	; 1
 706:	fc 01       	movw	r30, r24
 708:	20 83       	st	Z, r18
 70a:	8a 81       	ldd	r24, Y+2	; 0x02
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <flushRx>:
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	1f 92       	push	r1
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	85 e2       	ldi	r24, 0x25	; 37
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	25 e2       	ldi	r18, 0x25	; 37
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	f9 01       	movw	r30, r18
 730:	20 81       	ld	r18, Z
 732:	2e 7f       	andi	r18, 0xFE	; 254
 734:	fc 01       	movw	r30, r24
 736:	20 83       	st	Z, r18
 738:	8e e4       	ldi	r24, 0x4E	; 78
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	22 ee       	ldi	r18, 0xE2	; 226
 73e:	fc 01       	movw	r30, r24
 740:	20 83       	st	Z, r18
 742:	00 00       	nop
 744:	8d e4       	ldi	r24, 0x4D	; 77
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	fc 01       	movw	r30, r24
 74a:	80 81       	ld	r24, Z
 74c:	88 23       	and	r24, r24
 74e:	d4 f7       	brge	.-12     	; 0x744 <flushRx+0x28>
 750:	8e e4       	ldi	r24, 0x4E	; 78
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	fc 01       	movw	r30, r24
 756:	80 81       	ld	r24, Z
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	85 e2       	ldi	r24, 0x25	; 37
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	25 e2       	ldi	r18, 0x25	; 37
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	f9 01       	movw	r30, r18
 764:	20 81       	ld	r18, Z
 766:	21 60       	ori	r18, 0x01	; 1
 768:	fc 01       	movw	r30, r24
 76a:	20 83       	st	Z, r18
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	0f 90       	pop	r0
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <Radio_RxInit>:
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	00 d0       	rcall	.+0      	; 0x77c <Radio_RxInit+0x6>
 77c:	00 d0       	rcall	.+0      	; 0x77e <Radio_RxInit+0x8>
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
 782:	93 de       	rcall	.-730    	; 0x4aa <SPI_MasterInit>
 784:	84 e2       	ldi	r24, 0x24	; 36
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	24 e2       	ldi	r18, 0x24	; 36
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	f9 01       	movw	r30, r18
 78e:	20 81       	ld	r18, Z
 790:	23 60       	ori	r18, 0x03	; 3
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
 796:	85 e2       	ldi	r24, 0x25	; 37
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	25 e2       	ldi	r18, 0x25	; 37
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	f9 01       	movw	r30, r18
 7a0:	20 81       	ld	r18, Z
 7a2:	25 60       	ori	r18, 0x05	; 5
 7a4:	fc 01       	movw	r30, r24
 7a6:	20 83       	st	Z, r18
 7a8:	85 e0       	ldi	r24, 0x05	; 5
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	4e de       	rcall	.-868    	; 0x44a <delay_ms>
 7ae:	83 e3       	ldi	r24, 0x33	; 51
 7b0:	89 83       	std	Y+1, r24	; 0x01
 7b2:	88 e1       	ldi	r24, 0x18	; 24
 7b4:	8a 83       	std	Y+2, r24	; 0x02
 7b6:	84 e0       	ldi	r24, 0x04	; 4
 7b8:	8b 83       	std	Y+3, r24	; 0x03
 7ba:	86 e9       	ldi	r24, 0x96	; 150
 7bc:	8c 83       	std	Y+4, r24	; 0x04
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	ce 01       	movw	r24, r28
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	bc 01       	movw	r22, r24
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	8f de       	rcall	.-738    	; 0x4e8 <writeRegister>
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	89 83       	std	Y+1, r24	; 0x01
 7ce:	41 e0       	ldi	r20, 0x01	; 1
 7d0:	ce 01       	movw	r24, r28
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	bc 01       	movw	r22, r24
 7d6:	83 e0       	ldi	r24, 0x03	; 3
 7d8:	87 de       	rcall	.-754    	; 0x4e8 <writeRegister>
 7da:	ce 01       	movw	r24, r28
 7dc:	02 96       	adiw	r24, 0x02	; 2
 7de:	43 e0       	ldi	r20, 0x03	; 3
 7e0:	bc 01       	movw	r22, r24
 7e2:	8a e0       	ldi	r24, 0x0A	; 10
 7e4:	81 de       	rcall	.-766    	; 0x4e8 <writeRegister>
 7e6:	8c e4       	ldi	r24, 0x4C	; 76
 7e8:	89 83       	std	Y+1, r24	; 0x01
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	ce 01       	movw	r24, r28
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	bc 01       	movw	r22, r24
 7f2:	85 e0       	ldi	r24, 0x05	; 5
 7f4:	79 de       	rcall	.-782    	; 0x4e8 <writeRegister>
 7f6:	19 82       	std	Y+1, r1	; 0x01
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	ce 01       	movw	r24, r28
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	bc 01       	movw	r22, r24
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	72 de       	rcall	.-796    	; 0x4e8 <writeRegister>
 804:	85 e0       	ldi	r24, 0x05	; 5
 806:	89 83       	std	Y+1, r24	; 0x01
 808:	41 e0       	ldi	r20, 0x01	; 1
 80a:	ce 01       	movw	r24, r28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	bc 01       	movw	r22, r24
 810:	81 e1       	ldi	r24, 0x11	; 17
 812:	6a de       	rcall	.-812    	; 0x4e8 <writeRegister>
 814:	83 df       	rcall	.-250    	; 0x71c <flushRx>
 816:	85 e2       	ldi	r24, 0x25	; 37
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	25 e2       	ldi	r18, 0x25	; 37
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	f9 01       	movw	r30, r18
 820:	20 81       	ld	r18, Z
 822:	22 60       	ori	r18, 0x02	; 2
 824:	fc 01       	movw	r30, r24
 826:	20 83       	st	Z, r18
 828:	00 00       	nop
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <Radio_RxReset>:
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	85 e2       	ldi	r24, 0x25	; 37
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	25 e2       	ldi	r18, 0x25	; 37
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	f9 01       	movw	r30, r18
 84a:	20 81       	ld	r18, Z
 84c:	27 7f       	andi	r18, 0xF7	; 247
 84e:	fc 01       	movw	r30, r24
 850:	20 83       	st	Z, r18
 852:	8a e0       	ldi	r24, 0x0A	; 10
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	f9 dd       	rcall	.-1038   	; 0x44a <delay_ms>
 858:	85 e2       	ldi	r24, 0x25	; 37
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	25 e2       	ldi	r18, 0x25	; 37
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	f9 01       	movw	r30, r18
 862:	20 81       	ld	r18, Z
 864:	28 60       	ori	r18, 0x08	; 8
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
 86a:	85 df       	rcall	.-246    	; 0x776 <Radio_RxInit>
 86c:	00 00       	nop
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	08 95       	ret

00000874 <Radio_RxReady>:
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	1f 92       	push	r1
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
 87e:	41 e0       	ldi	r20, 0x01	; 1
 880:	ce 01       	movw	r24, r28
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	bc 01       	movw	r22, r24
 886:	87 e1       	ldi	r24, 0x17	; 23
 888:	86 de       	rcall	.-756    	; 0x596 <readRegister>
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	88 2f       	mov	r24, r24
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	81 70       	andi	r24, 0x01	; 1
 892:	99 27       	eor	r25, r25
 894:	89 2b       	or	r24, r25
 896:	11 f4       	brne	.+4      	; 0x89c <Radio_RxReady+0x28>
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	01 c0       	rjmp	.+2      	; 0x89e <Radio_RxReady+0x2a>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	0f 90       	pop	r0
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	08 95       	ret

000008a6 <Radio_RxRead>:
 8a6:	cf 93       	push	r28
 8a8:	df 93       	push	r29
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <Radio_RxRead+0x6>
 8ac:	1f 92       	push	r1
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
 8b2:	9a 83       	std	Y+2, r25	; 0x02
 8b4:	89 83       	std	Y+1, r24	; 0x01
 8b6:	6b 83       	std	Y+3, r22	; 0x03
 8b8:	89 81       	ldd	r24, Y+1	; 0x01
 8ba:	9a 81       	ldd	r25, Y+2	; 0x02
 8bc:	6b 81       	ldd	r22, Y+3	; 0x03
 8be:	ce de       	rcall	.-612    	; 0x65c <readPayloadRx>
 8c0:	00 00       	nop
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	08 95       	ret

000008ce <spi_servant>:
enum spi_states {receive, noSignal} spi_state;

unsigned char droppedPackets;

int spi_servant(int spi_state)
{
 8ce:	cf 93       	push	r28
 8d0:	df 93       	push	r29
 8d2:	00 d0       	rcall	.+0      	; 0x8d4 <spi_servant+0x6>
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
 8d8:	9a 83       	std	Y+2, r25	; 0x02
 8da:	89 83       	std	Y+1, r24	; 0x01
	switch(spi_state)
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	9a 81       	ldd	r25, Y+2	; 0x02
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	21 f0       	breq	.+8      	; 0x8ec <spi_servant+0x1e>
 8e4:	01 97       	sbiw	r24, 0x01	; 1
 8e6:	09 f4       	brne	.+2      	; 0x8ea <spi_servant+0x1c>
 8e8:	49 c0       	rjmp	.+146    	; 0x97c <spi_servant+0xae>
 8ea:	8d c0       	rjmp	.+282    	; 0xa06 <spi_servant+0x138>
// 			else
// 			{
// 				droneSignal = droneSignal | 0x80; // Set parity bit to 1 for odd number of 1s
// 			}
		case receive:
			if(Radio_RxReady())
 8ec:	c3 df       	rcall	.-122    	; 0x874 <Radio_RxReady>
 8ee:	88 23       	and	r24, r24
 8f0:	79 f1       	breq	.+94     	; 0x950 <spi_servant+0x82>
			{
				droppedPackets = 0;
 8f2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <droppedPackets>
				Radio_RxRead(payload, 1);
 8f6:	61 e0       	ldi	r22, 0x01	; 1
 8f8:	8d e0       	ldi	r24, 0x0D	; 13
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	d4 df       	rcall	.-88     	; 0x8a6 <Radio_RxRead>
				droneSignal = payload[0];
 8fe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <payload>
 902:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <droneSignal>
				
				droneZ = droneSignal & 0x03;
 906:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 90a:	83 70       	andi	r24, 0x03	; 3
 90c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <droneZ>
				droneXY = (droneSignal >> 2) & 0x07;
 910:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 914:	86 95       	lsr	r24
 916:	86 95       	lsr	r24
 918:	87 70       	andi	r24, 0x07	; 7
 91a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <droneXY>
				b1 = (droneSignal >> 6) & 0x01;
 91e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 922:	82 95       	swap	r24
 924:	86 95       	lsr	r24
 926:	86 95       	lsr	r24
 928:	83 70       	andi	r24, 0x03	; 3
 92a:	81 70       	andi	r24, 0x01	; 1
 92c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <b1>
				b2 = (droneSignal >> 5) & 0x01;
 930:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 934:	82 95       	swap	r24
 936:	86 95       	lsr	r24
 938:	87 70       	andi	r24, 0x07	; 7
 93a:	81 70       	andi	r24, 0x01	; 1
 93c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <b2>
				parity = (droneSignal >> 7) & 0x01;
 940:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 944:	88 1f       	adc	r24, r24
 946:	88 27       	eor	r24, r24
 948:	88 1f       	adc	r24, r24
 94a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <parity>
 94e:	13 c0       	rjmp	.+38     	; 0x976 <spi_servant+0xa8>
			}
			else
			{
				droppedPackets++;
 950:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <droppedPackets>
 954:	8f 5f       	subi	r24, 0xFF	; 255
 956:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <droppedPackets>
				if(droppedPackets == 40)
 95a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <droppedPackets>
 95e:	88 32       	cpi	r24, 0x28	; 40
 960:	51 f4       	brne	.+20     	; 0x976 <spi_servant+0xa8>
				{
					droneSignal = 0x40; // Drone will hover, but claw will be closed incase it has a package
 962:	80 e4       	ldi	r24, 0x40	; 64
 964:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <droneSignal>
					droppedPackets = 0;
 968:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <droppedPackets>
					spi_state = noSignal;
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	9a 83       	std	Y+2, r25	; 0x02
 972:	89 83       	std	Y+1, r24	; 0x01
					break;
 974:	4e c0       	rjmp	.+156    	; 0xa12 <spi_servant+0x144>
				}	
			}
			spi_state = receive;
 976:	1a 82       	std	Y+2, r1	; 0x02
			break;
 978:	19 82       	std	Y+1, r1	; 0x01
		case noSignal:
			if(Radio_RxReady())
 97a:	4b c0       	rjmp	.+150    	; 0xa12 <spi_servant+0x144>
 97c:	7b df       	rcall	.-266    	; 0x874 <Radio_RxReady>
 97e:	88 23       	and	r24, r24
 980:	89 f1       	breq	.+98     	; 0x9e4 <spi_servant+0x116>
			{
				droppedPackets = 0;
 982:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <droppedPackets>
				Radio_RxRead(payload, 1);
 986:	61 e0       	ldi	r22, 0x01	; 1
 988:	8d e0       	ldi	r24, 0x0D	; 13
 98a:	91 e0       	ldi	r25, 0x01	; 1
 98c:	8c df       	rcall	.-232    	; 0x8a6 <Radio_RxRead>
				droneSignal = payload[0];
 98e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <payload>
 992:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <droneSignal>
				
				droneZ = droneSignal & 0x03;
 996:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 99a:	83 70       	andi	r24, 0x03	; 3
 99c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <droneZ>
				droneXY = (droneSignal >> 2) & 0x07;
 9a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 9a4:	86 95       	lsr	r24
 9a6:	86 95       	lsr	r24
 9a8:	87 70       	andi	r24, 0x07	; 7
 9aa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <droneXY>
				b1 = (droneSignal >> 6) & 0x01;
 9ae:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 9b2:	82 95       	swap	r24
 9b4:	86 95       	lsr	r24
 9b6:	86 95       	lsr	r24
 9b8:	83 70       	andi	r24, 0x03	; 3
 9ba:	81 70       	andi	r24, 0x01	; 1
 9bc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <b1>
				b2 = (droneSignal >> 5) & 0x01;
 9c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 9c4:	82 95       	swap	r24
 9c6:	86 95       	lsr	r24
 9c8:	87 70       	andi	r24, 0x07	; 7
 9ca:	81 70       	andi	r24, 0x01	; 1
 9cc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <b2>
				parity = (droneSignal >> 7) & 0x01;
 9d0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <droneSignal>
 9d4:	88 1f       	adc	r24, r24
 9d6:	88 27       	eor	r24, r24
 9d8:	88 1f       	adc	r24, r24
 9da:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <parity>
				spi_state = receive;
 9de:	1a 82       	std	Y+2, r1	; 0x02
 9e0:	19 82       	std	Y+1, r1	; 0x01
				break;
 9e2:	17 c0       	rjmp	.+46     	; 0xa12 <spi_servant+0x144>
			}
			else
			{
				droppedPackets++;
 9e4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <droppedPackets>
 9e8:	8f 5f       	subi	r24, 0xFF	; 255
 9ea:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <droppedPackets>
				if(droppedPackets == 40)
 9ee:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <droppedPackets>
 9f2:	88 32       	cpi	r24, 0x28	; 40
				{
					Radio_RxReset();
 9f4:	19 f4       	brne	.+6      	; 0x9fc <spi_servant+0x12e>
 9f6:	20 df       	rcall	.-448    	; 0x838 <Radio_RxReset>
					droppedPackets = 0;
 9f8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <droppedPackets>
				}
			}
			spi_state = noSignal;
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	9a 83       	std	Y+2, r25	; 0x02
			break;
 a02:	89 83       	std	Y+1, r24	; 0x01
		default:
			droppedPackets = 0;
 a04:	06 c0       	rjmp	.+12     	; 0xa12 <spi_servant+0x144>
 a06:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <droppedPackets>
			Radio_RxInit();
 a0a:	b5 de       	rcall	.-662    	; 0x776 <Radio_RxInit>
			spi_state = receive;
 a0c:	1a 82       	std	Y+2, r1	; 0x02
 a0e:	19 82       	std	Y+1, r1	; 0x01
			break;
 a10:	00 00       	nop
	}
	return spi_state;
 a12:	89 81       	ldd	r24, Y+1	; 0x01
 a14:	9a 81       	ldd	r25, Y+2	; 0x02
}
 a16:	0f 90       	pop	r0
 a18:	0f 90       	pop	r0
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	08 95       	ret

00000a20 <TickFct_movement>:

// Joysticks are actually wired sideways so left/right and up/down are switched but the states are labeled correctly for their observed actions
enum movement_states {left_right, up_down} movement_state;
int TickFct_movement(int movement_state)
{
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	00 d0       	rcall	.+0      	; 0xa26 <TickFct_movement+0x6>
 a26:	cd b7       	in	r28, 0x3d	; 61
 a28:	de b7       	in	r29, 0x3e	; 62
 a2a:	9a 83       	std	Y+2, r25	; 0x02
 a2c:	89 83       	std	Y+1, r24	; 0x01
	switch(movement_state)
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	9a 81       	ldd	r25, Y+2	; 0x02
 a32:	00 97       	sbiw	r24, 0x00	; 0
 a34:	19 f0       	breq	.+6      	; 0xa3c <TickFct_movement+0x1c>
 a36:	01 97       	sbiw	r24, 0x01	; 1
 a38:	c1 f1       	breq	.+112    	; 0xaaa <TickFct_movement+0x8a>
 a3a:	6c c0       	rjmp	.+216    	; 0xb14 <TickFct_movement+0xf4>
	{
		case left_right: // Right joystick controls left and right movements
			if(droneXY == 1 || droneXY == 3) // Joystick is being tilted right (it is pointed the wrong way so if wired differently this code must be flipped
 a3c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <droneXY>
 a40:	81 30       	cpi	r24, 0x01	; 1
 a42:	21 f0       	breq	.+8      	; 0xa4c <TickFct_movement+0x2c>
 a44:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <droneXY>
 a48:	83 30       	cpi	r24, 0x03	; 3
 a4a:	89 f4       	brne	.+34     	; 0xa6e <TickFct_movement+0x4e>
			{
				if(column_val == 0x01) { column_val = 0x80;} // Move left a row
 a4c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_val>
 a50:	81 30       	cpi	r24, 0x01	; 1
 a52:	21 f4       	brne	.+8      	; 0xa5c <TickFct_movement+0x3c>
 a54:	80 e8       	ldi	r24, 0x80	; 128
 a56:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <column_val>
 a5a:	09 c0       	rjmp	.+18     	; 0xa6e <TickFct_movement+0x4e>
				else if (column_val != 0x01) { column_val = (column_val >> 1);} // Obviously a right shift must occur
 a5c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_val>
 a60:	81 30       	cpi	r24, 0x01	; 1
 a62:	29 f0       	breq	.+10     	; 0xa6e <TickFct_movement+0x4e>
 a64:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_val>
 a68:	86 95       	lsr	r24
 a6a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <column_val>
			}
			if(droneXY == 4 || droneXY == 6) // Joystick is being tilted left
 a6e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <droneXY>
 a72:	84 30       	cpi	r24, 0x04	; 4
 a74:	21 f0       	breq	.+8      	; 0xa7e <TickFct_movement+0x5e>
 a76:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <droneXY>
 a7a:	86 30       	cpi	r24, 0x06	; 6
 a7c:	89 f4       	brne	.+34     	; 0xaa0 <TickFct_movement+0x80>
			{
				if(column_val == 0x80) { column_val = 0x01;} // Move right a row
 a7e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_val>
 a82:	80 38       	cpi	r24, 0x80	; 128
 a84:	21 f4       	brne	.+8      	; 0xa8e <TickFct_movement+0x6e>
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <column_val>
 a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <TickFct_movement+0x80>
				else if (column_val != 0x80) { column_val = (column_val << 1);} // Obviously a left shift must occur
 a8e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_val>
 a92:	80 38       	cpi	r24, 0x80	; 128
 a94:	29 f0       	breq	.+10     	; 0xaa0 <TickFct_movement+0x80>
 a96:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_val>
 a9a:	88 0f       	add	r24, r24
 a9c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <column_val>
			}
			movement_state = up_down;
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	9a 83       	std	Y+2, r25	; 0x02
 aa6:	89 83       	std	Y+1, r24	; 0x01
			break;
 aa8:	38 c0       	rjmp	.+112    	; 0xb1a <TickFct_movement+0xfa>
		case up_down: // Left joystick controls forward and reverse movements
			if(droneXY == 2 || droneXY == 3 || droneXY == 6) // Joystick is being tilted up
 aaa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <droneXY>
 aae:	82 30       	cpi	r24, 0x02	; 2
 ab0:	41 f0       	breq	.+16     	; 0xac2 <TickFct_movement+0xa2>
 ab2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <droneXY>
 ab6:	83 30       	cpi	r24, 0x03	; 3
 ab8:	21 f0       	breq	.+8      	; 0xac2 <TickFct_movement+0xa2>
 aba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <droneXY>
 abe:	86 30       	cpi	r24, 0x06	; 6
 ac0:	89 f4       	brne	.+34     	; 0xae4 <TickFct_movement+0xc4>
			{
				if(column_sel == 0x01) { column_sel = 0x80;} // Move up a column
 ac2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_sel>
 ac6:	81 30       	cpi	r24, 0x01	; 1
 ac8:	21 f4       	brne	.+8      	; 0xad2 <TickFct_movement+0xb2>
 aca:	80 e8       	ldi	r24, 0x80	; 128
 acc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_sel>
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <TickFct_movement+0xc4>
				else if (column_sel != 0x01) { column_sel = (column_sel >> 1);} // Obviously a right shift must occur
 ad2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_sel>
 ad6:	81 30       	cpi	r24, 0x01	; 1
 ad8:	29 f0       	breq	.+10     	; 0xae4 <TickFct_movement+0xc4>
 ada:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_sel>
 ade:	86 95       	lsr	r24
 ae0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_sel>
			}
			if(droneXY == 5) // Joystick is being tilted down
 ae4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <droneXY>
 ae8:	85 30       	cpi	r24, 0x05	; 5
 aea:	89 f4       	brne	.+34     	; 0xb0e <TickFct_movement+0xee>
			{
				if(column_sel == 0x80) { column_sel = 0x01;} // Move down a column
 aec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_sel>
 af0:	80 38       	cpi	r24, 0x80	; 128
 af2:	21 f4       	brne	.+8      	; 0xafc <TickFct_movement+0xdc>
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_sel>
 afa:	09 c0       	rjmp	.+18     	; 0xb0e <TickFct_movement+0xee>
				else if (column_sel != 0x80) { column_sel = (column_sel << 1);} // Obviously a left shift must occur
 afc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_sel>
 b00:	80 38       	cpi	r24, 0x80	; 128
 b02:	29 f0       	breq	.+10     	; 0xb0e <TickFct_movement+0xee>
 b04:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_sel>
 b08:	88 0f       	add	r24, r24
 b0a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_sel>
			}
			movement_state = left_right; // Return to left right state
 b0e:	1a 82       	std	Y+2, r1	; 0x02
 b10:	19 82       	std	Y+1, r1	; 0x01
			break;
 b12:	03 c0       	rjmp	.+6      	; 0xb1a <TickFct_movement+0xfa>
		default:
			movement_state = left_right;
 b14:	1a 82       	std	Y+2, r1	; 0x02
 b16:	19 82       	std	Y+1, r1	; 0x01
			break;
 b18:	00 00       	nop
	}
	return movement_state;
 b1a:	89 81       	ldd	r24, Y+1	; 0x01
 b1c:	9a 81       	ldd	r25, Y+2	; 0x02
}
 b1e:	0f 90       	pop	r0
 b20:	0f 90       	pop	r0
 b22:	df 91       	pop	r29
 b24:	cf 91       	pop	r28
 b26:	08 95       	ret

00000b28 <TickFct_LEDState>:

// Test harness for LED matrix to make sure all user inputs are read in correctly
enum LED_states {synch} LED_state;
int TickFct_LEDState(int state)
{
 b28:	cf 93       	push	r28
 b2a:	df 93       	push	r29
 b2c:	00 d0       	rcall	.+0      	; 0xb2e <TickFct_LEDState+0x6>
 b2e:	cd b7       	in	r28, 0x3d	; 61
 b30:	de b7       	in	r29, 0x3e	; 62
 b32:	9a 83       	std	Y+2, r25	; 0x02
 b34:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_state)
 b36:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <LED_state>
 b3a:	88 2f       	mov	r24, r24
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	89 2b       	or	r24, r25
 b40:	81 f4       	brne	.+32     	; 0xb62 <TickFct_LEDState+0x3a>
	{
		case synch:
			PORTB = ~column_val;
 b42:	85 e2       	ldi	r24, 0x25	; 37
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <column_val>
 b4a:	20 95       	com	r18
 b4c:	fc 01       	movw	r30, r24
 b4e:	20 83       	st	Z, r18
			PORTA = column_sel;
 b50:	82 e2       	ldi	r24, 0x22	; 34
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <column_sel>
 b58:	fc 01       	movw	r30, r24
 b5a:	20 83       	st	Z, r18
			LED_state = synch;
 b5c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <LED_state>
			break;
 b60:	03 c0       	rjmp	.+6      	; 0xb68 <TickFct_LEDState+0x40>
		default:
			LED_state = synch;
 b62:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <LED_state>
			break;
 b66:	00 00       	nop
	}
	return LED_state;
 b68:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <LED_state>
 b6c:	88 2f       	mov	r24, r24
 b6e:	90 e0       	ldi	r25, 0x00	; 0
}
 b70:	0f 90       	pop	r0
 b72:	0f 90       	pop	r0
 b74:	df 91       	pop	r29
 b76:	cf 91       	pop	r28
 b78:	08 95       	ret

00000b7a <main>:

int main(void)
{
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	1f 92       	push	r1
 b80:	cd b7       	in	r28, 0x3d	; 61
 b82:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF; PORTA = 0x00; // Output to column val
 b84:	81 e2       	ldi	r24, 0x21	; 33
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	2f ef       	ldi	r18, 0xFF	; 255
 b8a:	fc 01       	movw	r30, r24
 b8c:	20 83       	st	Z, r18
 b8e:	82 e2       	ldi	r24, 0x22	; 34
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	fc 01       	movw	r30, r24
 b94:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // Output to column sel
 b96:	8a e2       	ldi	r24, 0x2A	; 42
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	2f ef       	ldi	r18, 0xFF	; 255
 b9c:	fc 01       	movw	r30, r24
 b9e:	20 83       	st	Z, r18
 ba0:	8b e2       	ldi	r24, 0x2B	; 43
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	fc 01       	movw	r30, r24
 ba6:	10 82       	st	Z, r1
	// Input from RF Receiver will be received from RX1 
	
	TimerSet(timerPeriod);
 ba8:	61 e0       	ldi	r22, 0x01	; 1
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	e7 db       	rcall	.-2098   	; 0x380 <TimerSet>
	TimerOn();
 bb2:	14 dc       	rcall	.-2008   	; 0x3dc <TimerOn>
 bb4:	19 82       	std	Y+1, r1	; 0x01
	
	unsigned char i = 0;
 bb6:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].state = -1;
 bb8:	28 2f       	mov	r18, r24
 bba:	30 e0       	ldi	r19, 0x00	; 0
 bbc:	4b e0       	ldi	r20, 0x0B	; 11
 bbe:	42 9f       	mul	r20, r18
 bc0:	c0 01       	movw	r24, r0
 bc2:	43 9f       	mul	r20, r19
 bc4:	90 0d       	add	r25, r0
 bc6:	11 24       	eor	r1, r1
 bc8:	8b 5e       	subi	r24, 0xEB	; 235
 bca:	9e 4f       	sbci	r25, 0xFE	; 254
 bcc:	2f ef       	ldi	r18, 0xFF	; 255
 bce:	fc 01       	movw	r30, r24
 bd0:	20 83       	st	Z, r18
 bd2:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].period = 50;
 bd4:	28 2f       	mov	r18, r24
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	4b e0       	ldi	r20, 0x0B	; 11
 bda:	42 9f       	mul	r20, r18
 bdc:	c0 01       	movw	r24, r0
 bde:	43 9f       	mul	r20, r19
 be0:	90 0d       	add	r25, r0
 be2:	11 24       	eor	r1, r1
 be4:	9c 01       	movw	r18, r24
 be6:	2a 5e       	subi	r18, 0xEA	; 234
 be8:	3e 4f       	sbci	r19, 0xFE	; 254
 bea:	82 e3       	ldi	r24, 0x32	; 50
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	a0 e0       	ldi	r26, 0x00	; 0
 bf0:	b0 e0       	ldi	r27, 0x00	; 0
 bf2:	f9 01       	movw	r30, r18
 bf4:	80 83       	st	Z, r24
 bf6:	91 83       	std	Z+1, r25	; 0x01
 bf8:	a2 83       	std	Z+2, r26	; 0x02
 bfa:	b3 83       	std	Z+3, r27	; 0x03
 bfc:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].elapsedTime = 0;
 bfe:	28 2f       	mov	r18, r24
 c00:	30 e0       	ldi	r19, 0x00	; 0
 c02:	4b e0       	ldi	r20, 0x0B	; 11
 c04:	42 9f       	mul	r20, r18
 c06:	c0 01       	movw	r24, r0
 c08:	43 9f       	mul	r20, r19
 c0a:	90 0d       	add	r25, r0
 c0c:	11 24       	eor	r1, r1
 c0e:	86 5e       	subi	r24, 0xE6	; 230
 c10:	9e 4f       	sbci	r25, 0xFE	; 254
 c12:	fc 01       	movw	r30, r24
 c14:	10 82       	st	Z, r1
 c16:	11 82       	std	Z+1, r1	; 0x01
 c18:	12 82       	std	Z+2, r1	; 0x02
 c1a:	13 82       	std	Z+3, r1	; 0x03
 c1c:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].TickFct = &spi_servant;
 c1e:	28 2f       	mov	r18, r24
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	4b e0       	ldi	r20, 0x0B	; 11
 c24:	42 9f       	mul	r20, r18
 c26:	c0 01       	movw	r24, r0
 c28:	43 9f       	mul	r20, r19
 c2a:	90 0d       	add	r25, r0
 c2c:	11 24       	eor	r1, r1
 c2e:	82 5e       	subi	r24, 0xE2	; 226
 c30:	9e 4f       	sbci	r25, 0xFE	; 254
 c32:	27 e6       	ldi	r18, 0x67	; 103
 c34:	34 e0       	ldi	r19, 0x04	; 4
 c36:	fc 01       	movw	r30, r24
 c38:	31 83       	std	Z+1, r19	; 0x01
 c3a:	20 83       	st	Z, r18
 c3c:	89 81       	ldd	r24, Y+1	; 0x01
	i++;
 c3e:	8f 5f       	subi	r24, 0xFF	; 255
 c40:	89 83       	std	Y+1, r24	; 0x01
 c42:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].state = -1;
 c44:	28 2f       	mov	r18, r24
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	4b e0       	ldi	r20, 0x0B	; 11
 c4a:	42 9f       	mul	r20, r18
 c4c:	c0 01       	movw	r24, r0
 c4e:	43 9f       	mul	r20, r19
 c50:	90 0d       	add	r25, r0
 c52:	11 24       	eor	r1, r1
 c54:	8b 5e       	subi	r24, 0xEB	; 235
 c56:	9e 4f       	sbci	r25, 0xFE	; 254
 c58:	2f ef       	ldi	r18, 0xFF	; 255
 c5a:	fc 01       	movw	r30, r24
 c5c:	20 83       	st	Z, r18
 c5e:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].period = 300;
 c60:	28 2f       	mov	r18, r24
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	4b e0       	ldi	r20, 0x0B	; 11
 c66:	42 9f       	mul	r20, r18
 c68:	c0 01       	movw	r24, r0
 c6a:	43 9f       	mul	r20, r19
 c6c:	90 0d       	add	r25, r0
 c6e:	11 24       	eor	r1, r1
 c70:	9c 01       	movw	r18, r24
 c72:	2a 5e       	subi	r18, 0xEA	; 234
 c74:	3e 4f       	sbci	r19, 0xFE	; 254
 c76:	8c e2       	ldi	r24, 0x2C	; 44
 c78:	91 e0       	ldi	r25, 0x01	; 1
 c7a:	a0 e0       	ldi	r26, 0x00	; 0
 c7c:	b0 e0       	ldi	r27, 0x00	; 0
 c7e:	f9 01       	movw	r30, r18
 c80:	80 83       	st	Z, r24
 c82:	91 83       	std	Z+1, r25	; 0x01
 c84:	a2 83       	std	Z+2, r26	; 0x02
 c86:	b3 83       	std	Z+3, r27	; 0x03
 c88:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].elapsedTime = 0;
 c8a:	28 2f       	mov	r18, r24
 c8c:	30 e0       	ldi	r19, 0x00	; 0
 c8e:	4b e0       	ldi	r20, 0x0B	; 11
 c90:	42 9f       	mul	r20, r18
 c92:	c0 01       	movw	r24, r0
 c94:	43 9f       	mul	r20, r19
 c96:	90 0d       	add	r25, r0
 c98:	11 24       	eor	r1, r1
 c9a:	86 5e       	subi	r24, 0xE6	; 230
 c9c:	9e 4f       	sbci	r25, 0xFE	; 254
 c9e:	fc 01       	movw	r30, r24
 ca0:	10 82       	st	Z, r1
 ca2:	11 82       	std	Z+1, r1	; 0x01
 ca4:	12 82       	std	Z+2, r1	; 0x02
 ca6:	13 82       	std	Z+3, r1	; 0x03
 ca8:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].TickFct = &TickFct_movement;
 caa:	28 2f       	mov	r18, r24
 cac:	30 e0       	ldi	r19, 0x00	; 0
 cae:	4b e0       	ldi	r20, 0x0B	; 11
 cb0:	42 9f       	mul	r20, r18
 cb2:	c0 01       	movw	r24, r0
 cb4:	43 9f       	mul	r20, r19
 cb6:	90 0d       	add	r25, r0
 cb8:	11 24       	eor	r1, r1
 cba:	82 5e       	subi	r24, 0xE2	; 226
 cbc:	9e 4f       	sbci	r25, 0xFE	; 254
 cbe:	20 e1       	ldi	r18, 0x10	; 16
 cc0:	35 e0       	ldi	r19, 0x05	; 5
 cc2:	fc 01       	movw	r30, r24
 cc4:	31 83       	std	Z+1, r19	; 0x01
 cc6:	20 83       	st	Z, r18
 cc8:	89 81       	ldd	r24, Y+1	; 0x01
	i++;
 cca:	8f 5f       	subi	r24, 0xFF	; 255
 ccc:	89 83       	std	Y+1, r24	; 0x01
 cce:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].state = -1;
 cd0:	28 2f       	mov	r18, r24
 cd2:	30 e0       	ldi	r19, 0x00	; 0
 cd4:	4b e0       	ldi	r20, 0x0B	; 11
 cd6:	42 9f       	mul	r20, r18
 cd8:	c0 01       	movw	r24, r0
 cda:	43 9f       	mul	r20, r19
 cdc:	90 0d       	add	r25, r0
 cde:	11 24       	eor	r1, r1
 ce0:	8b 5e       	subi	r24, 0xEB	; 235
 ce2:	9e 4f       	sbci	r25, 0xFE	; 254
 ce4:	2f ef       	ldi	r18, 0xFF	; 255
 ce6:	fc 01       	movw	r30, r24
 ce8:	20 83       	st	Z, r18
 cea:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].period = 50;
 cec:	28 2f       	mov	r18, r24
 cee:	30 e0       	ldi	r19, 0x00	; 0
 cf0:	4b e0       	ldi	r20, 0x0B	; 11
 cf2:	42 9f       	mul	r20, r18
 cf4:	c0 01       	movw	r24, r0
 cf6:	43 9f       	mul	r20, r19
 cf8:	90 0d       	add	r25, r0
 cfa:	11 24       	eor	r1, r1
 cfc:	9c 01       	movw	r18, r24
 cfe:	2a 5e       	subi	r18, 0xEA	; 234
 d00:	3e 4f       	sbci	r19, 0xFE	; 254
 d02:	82 e3       	ldi	r24, 0x32	; 50
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	a0 e0       	ldi	r26, 0x00	; 0
 d08:	b0 e0       	ldi	r27, 0x00	; 0
 d0a:	f9 01       	movw	r30, r18
 d0c:	80 83       	st	Z, r24
 d0e:	91 83       	std	Z+1, r25	; 0x01
 d10:	a2 83       	std	Z+2, r26	; 0x02
 d12:	b3 83       	std	Z+3, r27	; 0x03
 d14:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].elapsedTime = 0;
 d16:	28 2f       	mov	r18, r24
 d18:	30 e0       	ldi	r19, 0x00	; 0
 d1a:	4b e0       	ldi	r20, 0x0B	; 11
 d1c:	42 9f       	mul	r20, r18
 d1e:	c0 01       	movw	r24, r0
 d20:	43 9f       	mul	r20, r19
 d22:	90 0d       	add	r25, r0
 d24:	11 24       	eor	r1, r1
 d26:	86 5e       	subi	r24, 0xE6	; 230
 d28:	9e 4f       	sbci	r25, 0xFE	; 254
 d2a:	fc 01       	movw	r30, r24
 d2c:	10 82       	st	Z, r1
 d2e:	11 82       	std	Z+1, r1	; 0x01
 d30:	12 82       	std	Z+2, r1	; 0x02
 d32:	13 82       	std	Z+3, r1	; 0x03
 d34:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].TickFct = &TickFct_LEDState;
 d36:	28 2f       	mov	r18, r24
 d38:	30 e0       	ldi	r19, 0x00	; 0
 d3a:	4b e0       	ldi	r20, 0x0B	; 11
 d3c:	42 9f       	mul	r20, r18
 d3e:	c0 01       	movw	r24, r0
 d40:	43 9f       	mul	r20, r19
 d42:	90 0d       	add	r25, r0
 d44:	11 24       	eor	r1, r1
 d46:	82 5e       	subi	r24, 0xE2	; 226
 d48:	9e 4f       	sbci	r25, 0xFE	; 254
 d4a:	24 e9       	ldi	r18, 0x94	; 148
 d4c:	35 e0       	ldi	r19, 0x05	; 5
 d4e:	fc 01       	movw	r30, r24
 d50:	31 83       	std	Z+1, r19	; 0x01
 d52:	20 83       	st	Z, r18
 d54:	ff cf       	rjmp	.-2      	; 0xd54 <main+0x1da>

00000d56 <_exit>:
	
	while (1)
	{
	}
 d56:	f8 94       	cli

00000d58 <__stop_program>:
 d58:	ff cf       	rjmp	.-2      	; 0xd58 <__stop_program>
