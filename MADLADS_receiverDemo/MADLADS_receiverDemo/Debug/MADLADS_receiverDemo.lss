
MADLADS_receiverDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000c58  00000cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800104  00800104  00000cf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbf  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000949  00000000  00000000  00001e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000add  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00003230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d8  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082d  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000044fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	71 c1       	rjmp	.+738    	; 0x2ec <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fa c0       	rjmp	.+500    	; 0x22a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 33       	cpi	r26, 0x39	; 57
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	da d4       	rcall	.+2484   	; 0xa78 <main>
  c4:	c7 c5       	rjmp	.+2958   	; 0xc54 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
	RF_PORT|=(1<<CE_PIN);
}

void Radio_TxTransmit(unsigned char msg[], unsigned char bytes) {
	writePayloadTxNoack(msg, bytes);
}
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i.1615>
  d8:	9d c0       	rjmp	.+314    	; 0x214 <TimerISR+0x14c>
  da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	4b e0       	ldi	r20, 0x0B	; 11
  e4:	42 9f       	mul	r20, r18
  e6:	c0 01       	movw	r24, r0
  e8:	43 9f       	mul	r20, r19
  ea:	90 0d       	add	r25, r0
  ec:	11 24       	eor	r1, r1
  ee:	88 5e       	subi	r24, 0xE8	; 232
  f0:	9e 4f       	sbci	r25, 0xFE	; 254
  f2:	fc 01       	movw	r30, r24
  f4:	20 81       	ld	r18, Z
  f6:	31 81       	ldd	r19, Z+1	; 0x01
  f8:	42 81       	ldd	r20, Z+2	; 0x02
  fa:	53 81       	ldd	r21, Z+3	; 0x03
  fc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 100:	68 2f       	mov	r22, r24
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	eb e0       	ldi	r30, 0x0B	; 11
 106:	e6 9f       	mul	r30, r22
 108:	c0 01       	movw	r24, r0
 10a:	e7 9f       	mul	r30, r23
 10c:	90 0d       	add	r25, r0
 10e:	11 24       	eor	r1, r1
 110:	8c 5e       	subi	r24, 0xEC	; 236
 112:	9e 4f       	sbci	r25, 0xFE	; 254
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	a2 81       	ldd	r26, Z+2	; 0x02
 11c:	b3 81       	ldd	r27, Z+3	; 0x03
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	4a 07       	cpc	r20, r26
 124:	5b 07       	cpc	r21, r27
 126:	08 f4       	brcc	.+2      	; 0x12a <TimerISR+0x62>
 128:	42 c0       	rjmp	.+132    	; 0x1ae <TimerISR+0xe6>
 12a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 12e:	08 2f       	mov	r16, r24
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	4b e0       	ldi	r20, 0x0B	; 11
 13c:	42 9f       	mul	r20, r18
 13e:	c0 01       	movw	r24, r0
 140:	43 9f       	mul	r20, r19
 142:	90 0d       	add	r25, r0
 144:	11 24       	eor	r1, r1
 146:	84 5e       	subi	r24, 0xE4	; 228
 148:	9e 4f       	sbci	r25, 0xFE	; 254
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	31 81       	ldd	r19, Z+1	; 0x01
 150:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 154:	48 2f       	mov	r20, r24
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	6b e0       	ldi	r22, 0x0B	; 11
 15a:	64 9f       	mul	r22, r20
 15c:	c0 01       	movw	r24, r0
 15e:	65 9f       	mul	r22, r21
 160:	90 0d       	add	r25, r0
 162:	11 24       	eor	r1, r1
 164:	8d 5e       	subi	r24, 0xED	; 237
 166:	9e 4f       	sbci	r25, 0xFE	; 254
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	08 2e       	mov	r0, r24
 16e:	00 0c       	add	r0, r0
 170:	99 0b       	sbc	r25, r25
 172:	f9 01       	movw	r30, r18
 174:	09 95       	icall
 176:	38 2f       	mov	r19, r24
 178:	2b e0       	ldi	r18, 0x0B	; 11
 17a:	20 9f       	mul	r18, r16
 17c:	c0 01       	movw	r24, r0
 17e:	21 9f       	mul	r18, r17
 180:	90 0d       	add	r25, r0
 182:	11 24       	eor	r1, r1
 184:	8d 5e       	subi	r24, 0xED	; 237
 186:	9e 4f       	sbci	r25, 0xFE	; 254
 188:	fc 01       	movw	r30, r24
 18a:	30 83       	st	Z, r19
 18c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4b e0       	ldi	r20, 0x0B	; 11
 196:	42 9f       	mul	r20, r18
 198:	c0 01       	movw	r24, r0
 19a:	43 9f       	mul	r20, r19
 19c:	90 0d       	add	r25, r0
 19e:	11 24       	eor	r1, r1
 1a0:	88 5e       	subi	r24, 0xE8	; 232
 1a2:	9e 4f       	sbci	r25, 0xFE	; 254
 1a4:	fc 01       	movw	r30, r24
 1a6:	10 82       	st	Z, r1
 1a8:	11 82       	std	Z+1, r1	; 0x01
 1aa:	12 82       	std	Z+2, r1	; 0x02
 1ac:	13 82       	std	Z+3, r1	; 0x03
 1ae:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 1b2:	68 2f       	mov	r22, r24
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	4b e0       	ldi	r20, 0x0B	; 11
 1c0:	42 9f       	mul	r20, r18
 1c2:	c0 01       	movw	r24, r0
 1c4:	43 9f       	mul	r20, r19
 1c6:	90 0d       	add	r25, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	88 5e       	subi	r24, 0xE8	; 232
 1cc:	9e 4f       	sbci	r25, 0xFE	; 254
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 81       	ld	r18, Z
 1d2:	31 81       	ldd	r19, Z+1	; 0x01
 1d4:	42 81       	ldd	r20, Z+2	; 0x02
 1d6:	53 81       	ldd	r21, Z+3	; 0x03
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	a4 1f       	adc	r26, r20
 1ee:	b5 1f       	adc	r27, r21
 1f0:	4b e0       	ldi	r20, 0x0B	; 11
 1f2:	46 9f       	mul	r20, r22
 1f4:	90 01       	movw	r18, r0
 1f6:	47 9f       	mul	r20, r23
 1f8:	30 0d       	add	r19, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	28 5e       	subi	r18, 0xE8	; 232
 1fe:	3e 4f       	sbci	r19, 0xFE	; 254
 200:	f9 01       	movw	r30, r18
 202:	80 83       	st	Z, r24
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	a2 83       	std	Z+2, r26	; 0x02
 208:	b3 83       	std	Z+3, r27	; 0x03
 20a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i.1615>
 214:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1615>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	08 f4       	brcc	.+2      	; 0x21e <TimerISR+0x156>
 21c:	5e cf       	rjmp	.-324    	; 0xda <TimerISR+0x12>
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <__vector_13>:
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 23a:	0f 92       	push	r0
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 260:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 264:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 268:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	a1 09       	sbc	r26, r1
 270:	b1 09       	sbc	r27, r1
 272:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 276:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 27a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 27e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 282:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 286:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 28a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 28e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 292:	89 2b       	or	r24, r25
 294:	8a 2b       	or	r24, r26
 296:	8b 2b       	or	r24, r27
 298:	89 f4       	brne	.+34     	; 0x2bc <__vector_13+0x92>
 29a:	16 df       	rcall	.-468    	; 0xc8 <TimerISR>
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2a4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2a8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2b0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2b4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 2b8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 2bc:	00 00       	nop
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2e0:	0f 90       	pop	r0
 2e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_2>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2fc:	0f 92       	push	r0
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sonar_flag>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	a9 f4       	brne	.+42     	; 0x344 <__vector_2+0x58>
 31a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sonar_flag>
 31e:	81 e9       	ldi	r24, 0x91	; 145
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	10 82       	st	Z, r1
 326:	84 e9       	ldi	r24, 0x94	; 148
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	91 81       	ldd	r25, Z+1	; 0x01
 330:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <sonar+0x1>
 334:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sonar>
 338:	84 e9       	ldi	r24, 0x94	; 148
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	fc 01       	movw	r30, r24
 33e:	11 82       	std	Z+1, r1	; 0x01
 340:	10 82       	st	Z, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <__vector_2+0x70>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sonar_flag>
 34a:	81 e9       	ldi	r24, 0x91	; 145
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	21 e9       	ldi	r18, 0x91	; 145
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	22 60       	ori	r18, 0x02	; 2
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
 35c:	00 00       	nop
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 374:	0f 90       	pop	r0
 376:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <TimerSet>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <TimerSet+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <TimerSet+0x8>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	69 83       	std	Y+1, r22	; 0x01
 38e:	7a 83       	std	Y+2, r23	; 0x02
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	9c 83       	std	Y+4, r25	; 0x04
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	ab 81       	ldd	r26, Y+3	; 0x03
 39a:	bc 81       	ldd	r27, Y+4	; 0x04
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 3c4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 3c8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 3cc:	00 00       	nop
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <TimerOn>:
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	81 e8       	ldi	r24, 0x81	; 129
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2b e0       	ldi	r18, 0x0B	; 11
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	88 e8       	ldi	r24, 0x88	; 136
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2d e7       	ldi	r18, 0x7D	; 125
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	fc 01       	movw	r30, r24
 3f8:	31 83       	std	Z+1, r19	; 0x01
 3fa:	20 83       	st	Z, r18
 3fc:	8f e6       	ldi	r24, 0x6F	; 111
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	22 e0       	ldi	r18, 0x02	; 2
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
 406:	84 e8       	ldi	r24, 0x84	; 132
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	fc 01       	movw	r30, r24
 40c:	11 82       	std	Z+1, r1	; 0x01
 40e:	10 82       	st	Z, r1
 410:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 414:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 418:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 41c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 420:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 424:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 428:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 42c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 430:	8f e5       	ldi	r24, 0x5F	; 95
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	2f e5       	ldi	r18, 0x5F	; 95
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	20 68       	ori	r18, 0x80	; 128
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
 442:	00 00       	nop
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <delay_ms>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <delay_ms+0x6>
 450:	00 d0       	rcall	.+0      	; 0x452 <delay_ms+0x8>
 452:	00 d0       	rcall	.+0      	; 0x454 <delay_ms+0xa>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	9e 83       	std	Y+6, r25	; 0x06
 45a:	8d 83       	std	Y+5, r24	; 0x05
 45c:	1a 82       	std	Y+2, r1	; 0x02
 45e:	19 82       	std	Y+1, r1	; 0x01
 460:	13 c0       	rjmp	.+38     	; 0x488 <delay_ms+0x3e>
 462:	1c 82       	std	Y+4, r1	; 0x04
 464:	1b 82       	std	Y+3, r1	; 0x03
 466:	06 c0       	rjmp	.+12     	; 0x474 <delay_ms+0x2a>
 468:	00 00       	nop
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	9c 83       	std	Y+4, r25	; 0x04
 472:	8b 83       	std	Y+3, r24	; 0x03
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	9c 81       	ldd	r25, Y+4	; 0x04
 478:	87 30       	cpi	r24, 0x07	; 7
 47a:	93 40       	sbci	r25, 0x03	; 3
 47c:	ac f3       	brlt	.-22     	; 0x468 <delay_ms+0x1e>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	89 83       	std	Y+1, r24	; 0x01
 488:	29 81       	ldd	r18, Y+1	; 0x01
 48a:	3a 81       	ldd	r19, Y+2	; 0x02
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	9e 81       	ldd	r25, Y+6	; 0x06
 490:	28 17       	cp	r18, r24
 492:	39 07       	cpc	r19, r25
 494:	34 f3       	brlt	.-52     	; 0x462 <delay_ms+0x18>
 496:	00 00       	nop
 498:	26 96       	adiw	r28, 0x06	; 6
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <SPI_ServantInit>:
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	84 e2       	ldi	r24, 0x24	; 36
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	24 e2       	ldi	r18, 0x24	; 36
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	f9 01       	movw	r30, r18
 4bc:	20 81       	ld	r18, Z
 4be:	20 64       	ori	r18, 0x40	; 64
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
 4c4:	8c e4       	ldi	r24, 0x4C	; 76
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	2c e4       	ldi	r18, 0x4C	; 76
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	f9 01       	movw	r30, r18
 4ce:	20 81       	ld	r18, Z
 4d0:	20 6c       	ori	r18, 0xC0	; 192
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
 4d6:	8f e5       	ldi	r24, 0x5F	; 95
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	2f e5       	ldi	r18, 0x5F	; 95
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	f9 01       	movw	r30, r18
 4e0:	20 81       	ld	r18, Z
 4e2:	20 68       	ori	r18, 0x80	; 128
 4e4:	fc 01       	movw	r30, r24
 4e6:	20 83       	st	Z, r18
 4e8:	00 00       	nop
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <writeRegister>:
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <writeRegister+0x6>
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <writeRegister+0x8>
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <writeRegister+0xa>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	8b 83       	std	Y+3, r24	; 0x03
 500:	7d 83       	std	Y+5, r23	; 0x05
 502:	6c 83       	std	Y+4, r22	; 0x04
 504:	4e 83       	std	Y+6, r20	; 0x06
 506:	85 e2       	ldi	r24, 0x25	; 37
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	25 e2       	ldi	r18, 0x25	; 37
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	f9 01       	movw	r30, r18
 510:	20 81       	ld	r18, Z
 512:	2e 7f       	andi	r18, 0xFE	; 254
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18
 518:	8e e4       	ldi	r24, 0x4E	; 78
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	2b 81       	ldd	r18, Y+3	; 0x03
 51e:	2f 71       	andi	r18, 0x1F	; 31
 520:	20 62       	ori	r18, 0x20	; 32
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
 526:	00 00       	nop
 528:	8d e4       	ldi	r24, 0x4D	; 77
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	fc 01       	movw	r30, r24
 52e:	80 81       	ld	r24, Z
 530:	88 23       	and	r24, r24
 532:	d4 f7       	brge	.-12     	; 0x528 <writeRegister+0x38>
 534:	8e e4       	ldi	r24, 0x4E	; 78
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	fc 01       	movw	r30, r24
 53a:	80 81       	ld	r24, Z
 53c:	8a 83       	std	Y+2, r24	; 0x02
 53e:	19 82       	std	Y+1, r1	; 0x01
 540:	17 c0       	rjmp	.+46     	; 0x570 <writeRegister+0x80>
 542:	8e e4       	ldi	r24, 0x4E	; 78
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	29 81       	ldd	r18, Y+1	; 0x01
 548:	22 2f       	mov	r18, r18
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	4c 81       	ldd	r20, Y+4	; 0x04
 54e:	5d 81       	ldd	r21, Y+5	; 0x05
 550:	24 0f       	add	r18, r20
 552:	35 1f       	adc	r19, r21
 554:	f9 01       	movw	r30, r18
 556:	20 81       	ld	r18, Z
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
 55c:	00 00       	nop
 55e:	8d e4       	ldi	r24, 0x4D	; 77
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	fc 01       	movw	r30, r24
 564:	80 81       	ld	r24, Z
 566:	88 23       	and	r24, r24
 568:	d4 f7       	brge	.-12     	; 0x55e <writeRegister+0x6e>
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	8f 5f       	subi	r24, 0xFF	; 255
 56e:	89 83       	std	Y+1, r24	; 0x01
 570:	99 81       	ldd	r25, Y+1	; 0x01
 572:	8e 81       	ldd	r24, Y+6	; 0x06
 574:	98 17       	cp	r25, r24
 576:	28 f3       	brcs	.-54     	; 0x542 <writeRegister+0x52>
 578:	85 e2       	ldi	r24, 0x25	; 37
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	25 e2       	ldi	r18, 0x25	; 37
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	f9 01       	movw	r30, r18
 582:	20 81       	ld	r18, Z
 584:	21 60       	ori	r18, 0x01	; 1
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	26 96       	adiw	r28, 0x06	; 6
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <readRegister>:
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <readRegister+0x6>
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <readRegister+0x8>
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <readRegister+0xa>
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	8b 83       	std	Y+3, r24	; 0x03
 5ae:	7d 83       	std	Y+5, r23	; 0x05
 5b0:	6c 83       	std	Y+4, r22	; 0x04
 5b2:	4e 83       	std	Y+6, r20	; 0x06
 5b4:	85 e2       	ldi	r24, 0x25	; 37
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	25 e2       	ldi	r18, 0x25	; 37
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	f9 01       	movw	r30, r18
 5be:	20 81       	ld	r18, Z
 5c0:	2e 7f       	andi	r18, 0xFE	; 254
 5c2:	fc 01       	movw	r30, r24
 5c4:	20 83       	st	Z, r18
 5c6:	8e e4       	ldi	r24, 0x4E	; 78
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	2b 81       	ldd	r18, Y+3	; 0x03
 5cc:	2f 71       	andi	r18, 0x1F	; 31
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 83       	st	Z, r18
 5d2:	00 00       	nop
 5d4:	8d e4       	ldi	r24, 0x4D	; 77
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	fc 01       	movw	r30, r24
 5da:	80 81       	ld	r24, Z
 5dc:	88 23       	and	r24, r24
 5de:	d4 f7       	brge	.-12     	; 0x5d4 <readRegister+0x36>
 5e0:	8e e4       	ldi	r24, 0x4E	; 78
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	fc 01       	movw	r30, r24
 5e6:	80 81       	ld	r24, Z
 5e8:	8a 83       	std	Y+2, r24	; 0x02
 5ea:	19 82       	std	Y+1, r1	; 0x01
 5ec:	24 c0       	rjmp	.+72     	; 0x636 <readRegister+0x98>
 5ee:	8e e4       	ldi	r24, 0x4E	; 78
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	29 81       	ldd	r18, Y+1	; 0x01
 5f4:	22 2f       	mov	r18, r18
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	4c 81       	ldd	r20, Y+4	; 0x04
 5fa:	5d 81       	ldd	r21, Y+5	; 0x05
 5fc:	24 0f       	add	r18, r20
 5fe:	35 1f       	adc	r19, r21
 600:	f9 01       	movw	r30, r18
 602:	20 81       	ld	r18, Z
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18
 608:	00 00       	nop
 60a:	8d e4       	ldi	r24, 0x4D	; 77
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	fc 01       	movw	r30, r24
 610:	80 81       	ld	r24, Z
 612:	88 23       	and	r24, r24
 614:	d4 f7       	brge	.-12     	; 0x60a <readRegister+0x6c>
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	88 2f       	mov	r24, r24
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	2c 81       	ldd	r18, Y+4	; 0x04
 61e:	3d 81       	ldd	r19, Y+5	; 0x05
 620:	82 0f       	add	r24, r18
 622:	93 1f       	adc	r25, r19
 624:	2e e4       	ldi	r18, 0x4E	; 78
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	f9 01       	movw	r30, r18
 62a:	20 81       	ld	r18, Z
 62c:	fc 01       	movw	r30, r24
 62e:	20 83       	st	Z, r18
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	8f 5f       	subi	r24, 0xFF	; 255
 634:	89 83       	std	Y+1, r24	; 0x01
 636:	99 81       	ldd	r25, Y+1	; 0x01
 638:	8e 81       	ldd	r24, Y+6	; 0x06
 63a:	98 17       	cp	r25, r24
 63c:	c0 f2       	brcs	.-80     	; 0x5ee <readRegister+0x50>
 63e:	85 e2       	ldi	r24, 0x25	; 37
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	25 e2       	ldi	r18, 0x25	; 37
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	f9 01       	movw	r30, r18
 648:	20 81       	ld	r18, Z
 64a:	21 60       	ori	r18, 0x01	; 1
 64c:	fc 01       	movw	r30, r24
 64e:	20 83       	st	Z, r18
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	26 96       	adiw	r28, 0x06	; 6
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	f8 94       	cli
 658:	de bf       	out	0x3e, r29	; 62
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	cd bf       	out	0x3d, r28	; 61
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <readPayloadRx>:
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	00 d0       	rcall	.+0      	; 0x66a <readPayloadRx+0x6>
 66a:	00 d0       	rcall	.+0      	; 0x66c <readPayloadRx+0x8>
 66c:	1f 92       	push	r1
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	9c 83       	std	Y+4, r25	; 0x04
 674:	8b 83       	std	Y+3, r24	; 0x03
 676:	6d 83       	std	Y+5, r22	; 0x05
 678:	85 e2       	ldi	r24, 0x25	; 37
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	25 e2       	ldi	r18, 0x25	; 37
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	f9 01       	movw	r30, r18
 682:	20 81       	ld	r18, Z
 684:	2e 7f       	andi	r18, 0xFE	; 254
 686:	fc 01       	movw	r30, r24
 688:	20 83       	st	Z, r18
 68a:	8e e4       	ldi	r24, 0x4E	; 78
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	21 e6       	ldi	r18, 0x61	; 97
 690:	fc 01       	movw	r30, r24
 692:	20 83       	st	Z, r18
 694:	00 00       	nop
 696:	8d e4       	ldi	r24, 0x4D	; 77
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	fc 01       	movw	r30, r24
 69c:	80 81       	ld	r24, Z
 69e:	88 23       	and	r24, r24
 6a0:	d4 f7       	brge	.-12     	; 0x696 <readPayloadRx+0x32>
 6a2:	8e e4       	ldi	r24, 0x4E	; 78
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	fc 01       	movw	r30, r24
 6a8:	80 81       	ld	r24, Z
 6aa:	8a 83       	std	Y+2, r24	; 0x02
 6ac:	19 82       	std	Y+1, r1	; 0x01
 6ae:	24 c0       	rjmp	.+72     	; 0x6f8 <readPayloadRx+0x94>
 6b0:	8e e4       	ldi	r24, 0x4E	; 78
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	29 81       	ldd	r18, Y+1	; 0x01
 6b6:	22 2f       	mov	r18, r18
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	4b 81       	ldd	r20, Y+3	; 0x03
 6bc:	5c 81       	ldd	r21, Y+4	; 0x04
 6be:	24 0f       	add	r18, r20
 6c0:	35 1f       	adc	r19, r21
 6c2:	f9 01       	movw	r30, r18
 6c4:	20 81       	ld	r18, Z
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18
 6ca:	00 00       	nop
 6cc:	8d e4       	ldi	r24, 0x4D	; 77
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	fc 01       	movw	r30, r24
 6d2:	80 81       	ld	r24, Z
 6d4:	88 23       	and	r24, r24
 6d6:	d4 f7       	brge	.-12     	; 0x6cc <readPayloadRx+0x68>
 6d8:	89 81       	ldd	r24, Y+1	; 0x01
 6da:	88 2f       	mov	r24, r24
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	2b 81       	ldd	r18, Y+3	; 0x03
 6e0:	3c 81       	ldd	r19, Y+4	; 0x04
 6e2:	82 0f       	add	r24, r18
 6e4:	93 1f       	adc	r25, r19
 6e6:	2e e4       	ldi	r18, 0x4E	; 78
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	f9 01       	movw	r30, r18
 6ec:	20 81       	ld	r18, Z
 6ee:	fc 01       	movw	r30, r24
 6f0:	20 83       	st	Z, r18
 6f2:	89 81       	ldd	r24, Y+1	; 0x01
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	89 83       	std	Y+1, r24	; 0x01
 6f8:	99 81       	ldd	r25, Y+1	; 0x01
 6fa:	8d 81       	ldd	r24, Y+5	; 0x05
 6fc:	98 17       	cp	r25, r24
 6fe:	c0 f2       	brcs	.-80     	; 0x6b0 <readPayloadRx+0x4c>
 700:	85 e2       	ldi	r24, 0x25	; 37
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	25 e2       	ldi	r18, 0x25	; 37
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	f9 01       	movw	r30, r18
 70a:	20 81       	ld	r18, Z
 70c:	21 60       	ori	r18, 0x01	; 1
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <flushRx>:
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	1f 92       	push	r1
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	85 e2       	ldi	r24, 0x25	; 37
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	25 e2       	ldi	r18, 0x25	; 37
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	f9 01       	movw	r30, r18
 738:	20 81       	ld	r18, Z
 73a:	2e 7f       	andi	r18, 0xFE	; 254
 73c:	fc 01       	movw	r30, r24
 73e:	20 83       	st	Z, r18
 740:	8e e4       	ldi	r24, 0x4E	; 78
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	22 ee       	ldi	r18, 0xE2	; 226
 746:	fc 01       	movw	r30, r24
 748:	20 83       	st	Z, r18
 74a:	00 00       	nop
 74c:	8d e4       	ldi	r24, 0x4D	; 77
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	fc 01       	movw	r30, r24
 752:	80 81       	ld	r24, Z
 754:	88 23       	and	r24, r24
 756:	d4 f7       	brge	.-12     	; 0x74c <flushRx+0x28>
 758:	8e e4       	ldi	r24, 0x4E	; 78
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	fc 01       	movw	r30, r24
 75e:	80 81       	ld	r24, Z
 760:	89 83       	std	Y+1, r24	; 0x01
 762:	85 e2       	ldi	r24, 0x25	; 37
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	25 e2       	ldi	r18, 0x25	; 37
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	f9 01       	movw	r30, r18
 76c:	20 81       	ld	r18, Z
 76e:	21 60       	ori	r18, 0x01	; 1
 770:	fc 01       	movw	r30, r24
 772:	20 83       	st	Z, r18
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	0f 90       	pop	r0
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <Radio_RxInit>:

void Radio_RxInit() {
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	00 d0       	rcall	.+0      	; 0x784 <Radio_RxInit+0x6>
 784:	00 d0       	rcall	.+0      	; 0x786 <Radio_RxInit+0x8>
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
	SPI_ServantInit();
 78a:	8f de       	rcall	.-738    	; 0x4aa <SPI_ServantInit>
	RF_DDR|=(1<<CSN_PIN)|(1<<CE_PIN);
 78c:	84 e2       	ldi	r24, 0x24	; 36
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	24 e2       	ldi	r18, 0x24	; 36
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	f9 01       	movw	r30, r18
 796:	20 81       	ld	r18, Z
 798:	23 60       	ori	r18, 0x03	; 3
 79a:	fc 01       	movw	r30, r24
 79c:	20 83       	st	Z, r18
	RF_PORT|=(1<<IRQ_PIN)|(1<<CSN_PIN);
 79e:	85 e2       	ldi	r24, 0x25	; 37
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	25 e2       	ldi	r18, 0x25	; 37
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	f9 01       	movw	r30, r18
 7a8:	20 81       	ld	r18, Z
 7aa:	25 60       	ori	r18, 0x05	; 5
 7ac:	fc 01       	movw	r30, r24
 7ae:	20 83       	st	Z, r18
	delay_ms(5);
 7b0:	85 e0       	ldi	r24, 0x05	; 5
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	4a de       	rcall	.-876    	; 0x44a <delay_ms>
	unsigned char oneByte[1]={0x33};
 7b6:	83 e3       	ldi	r24, 0x33	; 51
 7b8:	89 83       	std	Y+1, r24	; 0x01
	unsigned char threeByte[3]={0x18, 0x04, 0x96};
 7ba:	88 e1       	ldi	r24, 0x18	; 24
 7bc:	8a 83       	std	Y+2, r24	; 0x02
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	8b 83       	std	Y+3, r24	; 0x03
 7c2:	86 e9       	ldi	r24, 0x96	; 150
 7c4:	8c 83       	std	Y+4, r24	; 0x04
	writeRegister(0x00, oneByte, 1); //set config reg to power up into rx mode
 7c6:	41 e0       	ldi	r20, 0x01	; 1
 7c8:	ce 01       	movw	r24, r28
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	bc 01       	movw	r22, r24
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	8f de       	rcall	.-738    	; 0x4f0 <writeRegister>
	oneByte[0]=0x01;
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	89 83       	std	Y+1, r24	; 0x01
	writeRegister(0x03, oneByte, 1); //set address length to 3 bytes
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	ce 01       	movw	r24, r28
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	bc 01       	movw	r22, r24
 7de:	83 e0       	ldi	r24, 0x03	; 3
 7e0:	87 de       	rcall	.-754    	; 0x4f0 <writeRegister>
	writeRegister(0x0A, threeByte, 3); //set address of pipe 0 to random number, in this case my birthday
 7e2:	ce 01       	movw	r24, r28
 7e4:	02 96       	adiw	r24, 0x02	; 2
 7e6:	43 e0       	ldi	r20, 0x03	; 3
 7e8:	bc 01       	movw	r22, r24
 7ea:	8a e0       	ldi	r24, 0x0A	; 10
 7ec:	81 de       	rcall	.-766    	; 0x4f0 <writeRegister>
	oneByte[0]=76;
 7ee:	8c e4       	ldi	r24, 0x4C	; 76
 7f0:	89 83       	std	Y+1, r24	; 0x01
	writeRegister(0x05, oneByte, 1); //set channel to 76
 7f2:	41 e0       	ldi	r20, 0x01	; 1
 7f4:	ce 01       	movw	r24, r28
 7f6:	01 96       	adiw	r24, 0x01	; 1
 7f8:	bc 01       	movw	r22, r24
 7fa:	85 e0       	ldi	r24, 0x05	; 5
 7fc:	79 de       	rcall	.-782    	; 0x4f0 <writeRegister>
	oneByte[0]=0x00;
	writeRegister(0x01, oneByte, 1); //turn off auto acknowledge
 7fe:	19 82       	std	Y+1, r1	; 0x01
 800:	41 e0       	ldi	r20, 0x01	; 1
 802:	ce 01       	movw	r24, r28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	bc 01       	movw	r22, r24
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	72 de       	rcall	.-796    	; 0x4f0 <writeRegister>
	oneByte[0]=5;
 80c:	85 e0       	ldi	r24, 0x05	; 5
	writeRegister(0x11, oneByte, 1); //set packet length for pipe 0
 80e:	89 83       	std	Y+1, r24	; 0x01
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	ce 01       	movw	r24, r28
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	bc 01       	movw	r22, r24
 818:	81 e1       	ldi	r24, 0x11	; 17
 81a:	6a de       	rcall	.-812    	; 0x4f0 <writeRegister>
	flushRx();
 81c:	83 df       	rcall	.-250    	; 0x724 <flushRx>
 81e:	85 e2       	ldi	r24, 0x25	; 37
	RF_PORT|=(1<<CE_PIN);
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	25 e2       	ldi	r18, 0x25	; 37
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	f9 01       	movw	r30, r18
 828:	20 81       	ld	r18, Z
 82a:	22 60       	ori	r18, 0x02	; 2
 82c:	fc 01       	movw	r30, r24
 82e:	20 83       	st	Z, r18
 830:	00 00       	nop
}
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <Radio_RxReset>:
 840:	cf 93       	push	r28

void Radio_RxReset() {
 842:	df 93       	push	r29
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
	RF_PORT&=~0x08;
 848:	85 e2       	ldi	r24, 0x25	; 37
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	25 e2       	ldi	r18, 0x25	; 37
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	f9 01       	movw	r30, r18
 852:	20 81       	ld	r18, Z
 854:	27 7f       	andi	r18, 0xF7	; 247
 856:	fc 01       	movw	r30, r24
 858:	20 83       	st	Z, r18
	delay_ms(10);
 85a:	8a e0       	ldi	r24, 0x0A	; 10
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	f5 dd       	rcall	.-1046   	; 0x44a <delay_ms>
	RF_PORT|=0x08;
 860:	85 e2       	ldi	r24, 0x25	; 37
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	25 e2       	ldi	r18, 0x25	; 37
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	f9 01       	movw	r30, r18
 86a:	20 81       	ld	r18, Z
 86c:	28 60       	ori	r18, 0x08	; 8
 86e:	fc 01       	movw	r30, r24
	Radio_RxInit();
 870:	20 83       	st	Z, r18
 872:	85 df       	rcall	.-246    	; 0x77e <Radio_RxInit>
}
 874:	00 00       	nop
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	08 95       	ret

0000087c <Radio_RxReady>:

unsigned char Radio_RxReady() {
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
 880:	1f 92       	push	r1
 882:	cd b7       	in	r28, 0x3d	; 61
 884:	de b7       	in	r29, 0x3e	; 62
	unsigned char FIFOStatus[1];
	readRegister(0x17, FIFOStatus, 1);
 886:	41 e0       	ldi	r20, 0x01	; 1
 888:	ce 01       	movw	r24, r28
 88a:	01 96       	adiw	r24, 0x01	; 1
 88c:	bc 01       	movw	r22, r24
 88e:	87 e1       	ldi	r24, 0x17	; 23
 890:	86 de       	rcall	.-756    	; 0x59e <readRegister>
	if((FIFOStatus[0]&0x01)==0) {
 892:	89 81       	ldd	r24, Y+1	; 0x01
 894:	88 2f       	mov	r24, r24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	81 70       	andi	r24, 0x01	; 1
 89a:	99 27       	eor	r25, r25
 89c:	89 2b       	or	r24, r25
 89e:	11 f4       	brne	.+4      	; 0x8a4 <Radio_RxReady+0x28>
		return(1);
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <Radio_RxReady+0x2a>
	}
	return(0);
 8a4:	80 e0       	ldi	r24, 0x00	; 0
}
 8a6:	0f 90       	pop	r0
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	08 95       	ret

000008ae <Radio_RxRead>:

void Radio_RxRead(unsigned char data[], unsigned char bytes) {
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
 8b2:	00 d0       	rcall	.+0      	; 0x8b4 <Radio_RxRead+0x6>
 8b4:	1f 92       	push	r1
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
 8ba:	9a 83       	std	Y+2, r25	; 0x02
 8bc:	89 83       	std	Y+1, r24	; 0x01
 8be:	6b 83       	std	Y+3, r22	; 0x03
	readPayloadRx(data, bytes);
 8c0:	89 81       	ldd	r24, Y+1	; 0x01
 8c2:	9a 81       	ldd	r25, Y+2	; 0x02
 8c4:	6b 81       	ldd	r22, Y+3	; 0x03
 8c6:	ce de       	rcall	.-612    	; 0x664 <readPayloadRx>
}
 8c8:	00 00       	nop
 8ca:	0f 90       	pop	r0
 8cc:	0f 90       	pop	r0
 8ce:	0f 90       	pop	r0
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	08 95       	ret

000008d6 <spi_servant>:
enum spi_states {receive, noSignal} spi_state;

unsigned char droppedPackets;

int spi_servant(int spi_state)
{
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	00 d0       	rcall	.+0      	; 0x8dc <spi_servant+0x6>
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
 8e0:	9a 83       	std	Y+2, r25	; 0x02
 8e2:	89 83       	std	Y+1, r24	; 0x01
	switch(spi_state)
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
 8e6:	9a 81       	ldd	r25, Y+2	; 0x02
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	21 f0       	breq	.+8      	; 0x8f4 <spi_servant+0x1e>
 8ec:	01 97       	sbiw	r24, 0x01	; 1
 8ee:	09 f4       	brne	.+2      	; 0x8f2 <spi_servant+0x1c>
 8f0:	4f c0       	rjmp	.+158    	; 0x990 <spi_servant+0xba>
 8f2:	99 c0       	rjmp	.+306    	; 0xa26 <spi_servant+0x150>
// 			else
// 			{
// 				droneSignal = droneSignal | 0x80; // Set parity bit to 1 for odd number of 1s
// 			}
		case receive:
			if(Radio_RxReady())
 8f4:	c3 df       	rcall	.-122    	; 0x87c <Radio_RxReady>
 8f6:	88 23       	and	r24, r24
 8f8:	a9 f1       	breq	.+106    	; 0x964 <spi_servant+0x8e>
			{
				droppedPackets = 0;
 8fa:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <droppedPackets>
				Radio_RxRead(payload, 1);
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	8b e0       	ldi	r24, 0x0B	; 11
 902:	91 e0       	ldi	r25, 0x01	; 1
 904:	d4 df       	rcall	.-88     	; 0x8ae <Radio_RxRead>
				droneSignal = payload[0];
 906:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <payload>
 90a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
				PORTA = droneSignal;
 90e:	82 e2       	ldi	r24, 0x22	; 34
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <droneSignal>
 916:	fc 01       	movw	r30, r24
 918:	20 83       	st	Z, r18
				
				droneZ = droneSignal & 0x03;
 91a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 91e:	83 70       	andi	r24, 0x03	; 3
 920:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <droneZ>
				droneXY = (droneSignal >> 2) & 0x07;
 924:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 928:	86 95       	lsr	r24
 92a:	86 95       	lsr	r24
 92c:	87 70       	andi	r24, 0x07	; 7
 92e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneXY>
				b1 = (droneSignal >> 6) & 0x01;
 932:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 936:	82 95       	swap	r24
 938:	86 95       	lsr	r24
 93a:	86 95       	lsr	r24
 93c:	83 70       	andi	r24, 0x03	; 3
 93e:	81 70       	andi	r24, 0x01	; 1
 940:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <b1>
				b2 = (droneSignal >> 5) & 0x01;
 944:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 948:	82 95       	swap	r24
 94a:	86 95       	lsr	r24
 94c:	87 70       	andi	r24, 0x07	; 7
 94e:	81 70       	andi	r24, 0x01	; 1
 950:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <b2>
				parity = (droneSignal >> 7) & 0x01;
 954:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 958:	88 1f       	adc	r24, r24
 95a:	88 27       	eor	r24, r24
 95c:	88 1f       	adc	r24, r24
 95e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <parity>
 962:	13 c0       	rjmp	.+38     	; 0x98a <spi_servant+0xb4>
			}
			else
			{
				droppedPackets++;
 964:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <droppedPackets>
 968:	8f 5f       	subi	r24, 0xFF	; 255
 96a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <droppedPackets>
				if(droppedPackets == 40)
 96e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <droppedPackets>
 972:	88 32       	cpi	r24, 0x28	; 40
 974:	51 f4       	brne	.+20     	; 0x98a <spi_servant+0xb4>
				{
					droneSignal = 0x40; // Drone will hover, but claw will be closed incase it has a package
 976:	80 e4       	ldi	r24, 0x40	; 64
 978:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
					droppedPackets = 0;
 97c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <droppedPackets>
					spi_state = noSignal;
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	9a 83       	std	Y+2, r25	; 0x02
 986:	89 83       	std	Y+1, r24	; 0x01
					break;
 988:	54 c0       	rjmp	.+168    	; 0xa32 <spi_servant+0x15c>
				}	
			}
			spi_state = receive;
 98a:	1a 82       	std	Y+2, r1	; 0x02
			break;
 98c:	19 82       	std	Y+1, r1	; 0x01
		case noSignal:
			if(Radio_RxReady())
 98e:	51 c0       	rjmp	.+162    	; 0xa32 <spi_servant+0x15c>
 990:	75 df       	rcall	.-278    	; 0x87c <Radio_RxReady>
 992:	88 23       	and	r24, r24
 994:	b9 f1       	breq	.+110    	; 0xa04 <spi_servant+0x12e>
			{
				droppedPackets = 0;
 996:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <droppedPackets>
				Radio_RxRead(payload, 1);
 99a:	61 e0       	ldi	r22, 0x01	; 1
 99c:	8b e0       	ldi	r24, 0x0B	; 11
 99e:	91 e0       	ldi	r25, 0x01	; 1
 9a0:	86 df       	rcall	.-244    	; 0x8ae <Radio_RxRead>
				droneSignal = payload[0];
 9a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <payload>
 9a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <droneSignal>
				PORTA = droneSignal;
 9aa:	82 e2       	ldi	r24, 0x22	; 34
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <droneSignal>
 9b2:	fc 01       	movw	r30, r24
 9b4:	20 83       	st	Z, r18
				
				droneZ = droneSignal & 0x03;
 9b6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 9ba:	83 70       	andi	r24, 0x03	; 3
 9bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <droneZ>
				droneXY = (droneSignal >> 2) & 0x07;
 9c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 9c4:	86 95       	lsr	r24
 9c6:	86 95       	lsr	r24
 9c8:	87 70       	andi	r24, 0x07	; 7
 9ca:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <droneXY>
				b1 = (droneSignal >> 6) & 0x01;
 9ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 9d2:	82 95       	swap	r24
 9d4:	86 95       	lsr	r24
 9d6:	86 95       	lsr	r24
 9d8:	83 70       	andi	r24, 0x03	; 3
 9da:	81 70       	andi	r24, 0x01	; 1
 9dc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <b1>
				b2 = (droneSignal >> 5) & 0x01;
 9e0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 9e4:	82 95       	swap	r24
 9e6:	86 95       	lsr	r24
 9e8:	87 70       	andi	r24, 0x07	; 7
 9ea:	81 70       	andi	r24, 0x01	; 1
 9ec:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <b2>
				parity = (droneSignal >> 7) & 0x01;
 9f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <droneSignal>
 9f4:	88 1f       	adc	r24, r24
 9f6:	88 27       	eor	r24, r24
 9f8:	88 1f       	adc	r24, r24
 9fa:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <parity>
				spi_state = receive;
 9fe:	1a 82       	std	Y+2, r1	; 0x02
 a00:	19 82       	std	Y+1, r1	; 0x01
				break;
 a02:	17 c0       	rjmp	.+46     	; 0xa32 <spi_servant+0x15c>
			}
			else
			{
				droppedPackets++;
 a04:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <droppedPackets>
 a08:	8f 5f       	subi	r24, 0xFF	; 255
 a0a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <droppedPackets>
				if(droppedPackets == 40)
 a0e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <droppedPackets>
 a12:	88 32       	cpi	r24, 0x28	; 40
				{
					Radio_RxReset();
 a14:	19 f4       	brne	.+6      	; 0xa1c <spi_servant+0x146>
 a16:	14 df       	rcall	.-472    	; 0x840 <Radio_RxReset>
					droppedPackets = 0;
 a18:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <droppedPackets>
				}
			}
			spi_state = noSignal;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	9a 83       	std	Y+2, r25	; 0x02
			break;
 a22:	89 83       	std	Y+1, r24	; 0x01
		default:
			droppedPackets = 0;
 a24:	06 c0       	rjmp	.+12     	; 0xa32 <spi_servant+0x15c>
 a26:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <droppedPackets>
			Radio_RxInit();
 a2a:	a9 de       	rcall	.-686    	; 0x77e <Radio_RxInit>
			spi_state = receive;
 a2c:	1a 82       	std	Y+2, r1	; 0x02
 a2e:	19 82       	std	Y+1, r1	; 0x01
			break;
 a30:	00 00       	nop
	}
	return spi_state;
 a32:	89 81       	ldd	r24, Y+1	; 0x01
 a34:	9a 81       	ldd	r25, Y+2	; 0x02
}
 a36:	0f 90       	pop	r0
 a38:	0f 90       	pop	r0
 a3a:	df 91       	pop	r29
 a3c:	cf 91       	pop	r28
 a3e:	08 95       	ret

00000a40 <TickFct_movement>:

// Joysticks are actually wired sideways so left/right and up/down are switched but the states are labeled correctly for their observed actions
enum movement_states {left_right, up_down} movement_state;
int TickFct_movement(int movement_state)
{
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	00 d0       	rcall	.+0      	; 0xa46 <TickFct_movement+0x6>
 a46:	cd b7       	in	r28, 0x3d	; 61
 a48:	de b7       	in	r29, 0x3e	; 62
 a4a:	9a 83       	std	Y+2, r25	; 0x02
 a4c:	89 83       	std	Y+1, r24	; 0x01
	return -1;
 a4e:	8f ef       	ldi	r24, 0xFF	; 255
 a50:	9f ef       	ldi	r25, 0xFF	; 255
		default:
			movement_state = left_right;
			break;
	}
	return movement_state;
}
 a52:	0f 90       	pop	r0
 a54:	0f 90       	pop	r0
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	08 95       	ret

00000a5c <TickFct_LEDState>:

// Test harness for LED matrix to make sure all user inputs are read in correctly
enum LED_states {synch} LED_state;
int TickFct_LEDState(int state)
{
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	00 d0       	rcall	.+0      	; 0xa62 <TickFct_LEDState+0x6>
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
 a66:	9a 83       	std	Y+2, r25	; 0x02
 a68:	89 83       	std	Y+1, r24	; 0x01
	return -1;
 a6a:	8f ef       	ldi	r24, 0xFF	; 255
 a6c:	9f ef       	ldi	r25, 0xFF	; 255
		default:
			LED_state = synch;
			break;
	}
	return LED_state;
}
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	08 95       	ret

00000a78 <main>:

int main(void)
{
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	1f 92       	push	r1
 a7e:	cd b7       	in	r28, 0x3d	; 61
 a80:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF; PORTA = 0x00; // Output to column val
 a82:	81 e2       	ldi	r24, 0x21	; 33
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	2f ef       	ldi	r18, 0xFF	; 255
 a88:	fc 01       	movw	r30, r24
 a8a:	20 83       	st	Z, r18
 a8c:	82 e2       	ldi	r24, 0x22	; 34
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	fc 01       	movw	r30, r24
 a92:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // Output to column sel
 a94:	8a e2       	ldi	r24, 0x2A	; 42
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	2f ef       	ldi	r18, 0xFF	; 255
 a9a:	fc 01       	movw	r30, r24
 a9c:	20 83       	st	Z, r18
 a9e:	8b e2       	ldi	r24, 0x2B	; 43
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	fc 01       	movw	r30, r24
 aa4:	10 82       	st	Z, r1
	// Input from RF Receiver will be received from RX1 
	
	TimerSet(timerPeriod);
 aa6:	61 e0       	ldi	r22, 0x01	; 1
 aa8:	70 e0       	ldi	r23, 0x00	; 0
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	68 dc       	rcall	.-1840   	; 0x380 <TimerSet>
	TimerOn();
 ab0:	95 dc       	rcall	.-1750   	; 0x3dc <TimerOn>
 ab2:	19 82       	std	Y+1, r1	; 0x01
	
	unsigned char i = 0;
 ab4:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].state = -1;
 ab6:	28 2f       	mov	r18, r24
 ab8:	30 e0       	ldi	r19, 0x00	; 0
 aba:	4b e0       	ldi	r20, 0x0B	; 11
 abc:	42 9f       	mul	r20, r18
 abe:	c0 01       	movw	r24, r0
 ac0:	43 9f       	mul	r20, r19
 ac2:	90 0d       	add	r25, r0
 ac4:	11 24       	eor	r1, r1
 ac6:	8d 5e       	subi	r24, 0xED	; 237
 ac8:	9e 4f       	sbci	r25, 0xFE	; 254
 aca:	2f ef       	ldi	r18, 0xFF	; 255
 acc:	fc 01       	movw	r30, r24
 ace:	20 83       	st	Z, r18
 ad0:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].period = 50;
 ad2:	28 2f       	mov	r18, r24
 ad4:	30 e0       	ldi	r19, 0x00	; 0
 ad6:	4b e0       	ldi	r20, 0x0B	; 11
 ad8:	42 9f       	mul	r20, r18
 ada:	c0 01       	movw	r24, r0
 adc:	43 9f       	mul	r20, r19
 ade:	90 0d       	add	r25, r0
 ae0:	11 24       	eor	r1, r1
 ae2:	9c 01       	movw	r18, r24
 ae4:	2c 5e       	subi	r18, 0xEC	; 236
 ae6:	3e 4f       	sbci	r19, 0xFE	; 254
 ae8:	82 e3       	ldi	r24, 0x32	; 50
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	a0 e0       	ldi	r26, 0x00	; 0
 aee:	b0 e0       	ldi	r27, 0x00	; 0
 af0:	f9 01       	movw	r30, r18
 af2:	80 83       	st	Z, r24
 af4:	91 83       	std	Z+1, r25	; 0x01
 af6:	a2 83       	std	Z+2, r26	; 0x02
 af8:	b3 83       	std	Z+3, r27	; 0x03
 afa:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].elapsedTime = 0;
 afc:	28 2f       	mov	r18, r24
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	4b e0       	ldi	r20, 0x0B	; 11
 b02:	42 9f       	mul	r20, r18
 b04:	c0 01       	movw	r24, r0
 b06:	43 9f       	mul	r20, r19
 b08:	90 0d       	add	r25, r0
 b0a:	11 24       	eor	r1, r1
 b0c:	88 5e       	subi	r24, 0xE8	; 232
 b0e:	9e 4f       	sbci	r25, 0xFE	; 254
 b10:	fc 01       	movw	r30, r24
 b12:	10 82       	st	Z, r1
 b14:	11 82       	std	Z+1, r1	; 0x01
 b16:	12 82       	std	Z+2, r1	; 0x02
 b18:	13 82       	std	Z+3, r1	; 0x03
 b1a:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].TickFct = &spi_servant;
 b1c:	28 2f       	mov	r18, r24
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	4b e0       	ldi	r20, 0x0B	; 11
 b22:	42 9f       	mul	r20, r18
 b24:	c0 01       	movw	r24, r0
 b26:	43 9f       	mul	r20, r19
 b28:	90 0d       	add	r25, r0
 b2a:	11 24       	eor	r1, r1
 b2c:	84 5e       	subi	r24, 0xE4	; 228
 b2e:	9e 4f       	sbci	r25, 0xFE	; 254
 b30:	2b e6       	ldi	r18, 0x6B	; 107
 b32:	34 e0       	ldi	r19, 0x04	; 4
 b34:	fc 01       	movw	r30, r24
 b36:	31 83       	std	Z+1, r19	; 0x01
 b38:	20 83       	st	Z, r18
 b3a:	89 81       	ldd	r24, Y+1	; 0x01
	i++;
 b3c:	8f 5f       	subi	r24, 0xFF	; 255
 b3e:	89 83       	std	Y+1, r24	; 0x01
 b40:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].state = -1;
 b42:	28 2f       	mov	r18, r24
 b44:	30 e0       	ldi	r19, 0x00	; 0
 b46:	4b e0       	ldi	r20, 0x0B	; 11
 b48:	42 9f       	mul	r20, r18
 b4a:	c0 01       	movw	r24, r0
 b4c:	43 9f       	mul	r20, r19
 b4e:	90 0d       	add	r25, r0
 b50:	11 24       	eor	r1, r1
 b52:	8d 5e       	subi	r24, 0xED	; 237
 b54:	9e 4f       	sbci	r25, 0xFE	; 254
 b56:	2f ef       	ldi	r18, 0xFF	; 255
 b58:	fc 01       	movw	r30, r24
 b5a:	20 83       	st	Z, r18
 b5c:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].period = 300;
 b5e:	28 2f       	mov	r18, r24
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	4b e0       	ldi	r20, 0x0B	; 11
 b64:	42 9f       	mul	r20, r18
 b66:	c0 01       	movw	r24, r0
 b68:	43 9f       	mul	r20, r19
 b6a:	90 0d       	add	r25, r0
 b6c:	11 24       	eor	r1, r1
 b6e:	9c 01       	movw	r18, r24
 b70:	2c 5e       	subi	r18, 0xEC	; 236
 b72:	3e 4f       	sbci	r19, 0xFE	; 254
 b74:	8c e2       	ldi	r24, 0x2C	; 44
 b76:	91 e0       	ldi	r25, 0x01	; 1
 b78:	a0 e0       	ldi	r26, 0x00	; 0
 b7a:	b0 e0       	ldi	r27, 0x00	; 0
 b7c:	f9 01       	movw	r30, r18
 b7e:	80 83       	st	Z, r24
 b80:	91 83       	std	Z+1, r25	; 0x01
 b82:	a2 83       	std	Z+2, r26	; 0x02
 b84:	b3 83       	std	Z+3, r27	; 0x03
 b86:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].elapsedTime = 0;
 b88:	28 2f       	mov	r18, r24
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	4b e0       	ldi	r20, 0x0B	; 11
 b8e:	42 9f       	mul	r20, r18
 b90:	c0 01       	movw	r24, r0
 b92:	43 9f       	mul	r20, r19
 b94:	90 0d       	add	r25, r0
 b96:	11 24       	eor	r1, r1
 b98:	88 5e       	subi	r24, 0xE8	; 232
 b9a:	9e 4f       	sbci	r25, 0xFE	; 254
 b9c:	fc 01       	movw	r30, r24
 b9e:	10 82       	st	Z, r1
 ba0:	11 82       	std	Z+1, r1	; 0x01
 ba2:	12 82       	std	Z+2, r1	; 0x02
 ba4:	13 82       	std	Z+3, r1	; 0x03
 ba6:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].TickFct = &TickFct_movement;
 ba8:	28 2f       	mov	r18, r24
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	4b e0       	ldi	r20, 0x0B	; 11
 bae:	42 9f       	mul	r20, r18
 bb0:	c0 01       	movw	r24, r0
 bb2:	43 9f       	mul	r20, r19
 bb4:	90 0d       	add	r25, r0
 bb6:	11 24       	eor	r1, r1
 bb8:	84 5e       	subi	r24, 0xE4	; 228
 bba:	9e 4f       	sbci	r25, 0xFE	; 254
 bbc:	20 e2       	ldi	r18, 0x20	; 32
 bbe:	35 e0       	ldi	r19, 0x05	; 5
 bc0:	fc 01       	movw	r30, r24
 bc2:	31 83       	std	Z+1, r19	; 0x01
 bc4:	20 83       	st	Z, r18
 bc6:	89 81       	ldd	r24, Y+1	; 0x01
	i++;
 bc8:	8f 5f       	subi	r24, 0xFF	; 255
 bca:	89 83       	std	Y+1, r24	; 0x01
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].state = -1;
 bce:	28 2f       	mov	r18, r24
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	4b e0       	ldi	r20, 0x0B	; 11
 bd4:	42 9f       	mul	r20, r18
 bd6:	c0 01       	movw	r24, r0
 bd8:	43 9f       	mul	r20, r19
 bda:	90 0d       	add	r25, r0
 bdc:	11 24       	eor	r1, r1
 bde:	8d 5e       	subi	r24, 0xED	; 237
 be0:	9e 4f       	sbci	r25, 0xFE	; 254
 be2:	2f ef       	ldi	r18, 0xFF	; 255
 be4:	fc 01       	movw	r30, r24
 be6:	20 83       	st	Z, r18
 be8:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].period = 50;
 bea:	28 2f       	mov	r18, r24
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	4b e0       	ldi	r20, 0x0B	; 11
 bf0:	42 9f       	mul	r20, r18
 bf2:	c0 01       	movw	r24, r0
 bf4:	43 9f       	mul	r20, r19
 bf6:	90 0d       	add	r25, r0
 bf8:	11 24       	eor	r1, r1
 bfa:	9c 01       	movw	r18, r24
 bfc:	2c 5e       	subi	r18, 0xEC	; 236
 bfe:	3e 4f       	sbci	r19, 0xFE	; 254
 c00:	82 e3       	ldi	r24, 0x32	; 50
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	a0 e0       	ldi	r26, 0x00	; 0
 c06:	b0 e0       	ldi	r27, 0x00	; 0
 c08:	f9 01       	movw	r30, r18
 c0a:	80 83       	st	Z, r24
 c0c:	91 83       	std	Z+1, r25	; 0x01
 c0e:	a2 83       	std	Z+2, r26	; 0x02
 c10:	b3 83       	std	Z+3, r27	; 0x03
 c12:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].elapsedTime = 0;
 c14:	28 2f       	mov	r18, r24
 c16:	30 e0       	ldi	r19, 0x00	; 0
 c18:	4b e0       	ldi	r20, 0x0B	; 11
 c1a:	42 9f       	mul	r20, r18
 c1c:	c0 01       	movw	r24, r0
 c1e:	43 9f       	mul	r20, r19
 c20:	90 0d       	add	r25, r0
 c22:	11 24       	eor	r1, r1
 c24:	88 5e       	subi	r24, 0xE8	; 232
 c26:	9e 4f       	sbci	r25, 0xFE	; 254
 c28:	fc 01       	movw	r30, r24
 c2a:	10 82       	st	Z, r1
 c2c:	11 82       	std	Z+1, r1	; 0x01
 c2e:	12 82       	std	Z+2, r1	; 0x02
 c30:	13 82       	std	Z+3, r1	; 0x03
 c32:	89 81       	ldd	r24, Y+1	; 0x01
	tasks[i].TickFct = &TickFct_LEDState;
 c34:	28 2f       	mov	r18, r24
 c36:	30 e0       	ldi	r19, 0x00	; 0
 c38:	4b e0       	ldi	r20, 0x0B	; 11
 c3a:	42 9f       	mul	r20, r18
 c3c:	c0 01       	movw	r24, r0
 c3e:	43 9f       	mul	r20, r19
 c40:	90 0d       	add	r25, r0
 c42:	11 24       	eor	r1, r1
 c44:	84 5e       	subi	r24, 0xE4	; 228
 c46:	9e 4f       	sbci	r25, 0xFE	; 254
 c48:	2e e2       	ldi	r18, 0x2E	; 46
 c4a:	35 e0       	ldi	r19, 0x05	; 5
 c4c:	fc 01       	movw	r30, r24
 c4e:	31 83       	std	Z+1, r19	; 0x01
 c50:	20 83       	st	Z, r18
 c52:	ff cf       	rjmp	.-2      	; 0xc52 <main+0x1da>

00000c54 <_exit>:
	
	while (1)
	{
	}
 c54:	f8 94       	cli

00000c56 <__stop_program>:
 c56:	ff cf       	rjmp	.-2      	; 0xc56 <__stop_program>
